<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="ll__resolve__list_8c" kind="file" language="C++">
    <compoundname>ll_resolve_list.c</compoundname>
    <includes local="yes">sfr.h</includes>
    <includes refid="link__layer_8h" local="yes">ble/link_layer.h</includes>
    <includes local="yes">stdarg.h</includes>
    <includes refid="h4__transport_8h" local="yes">h4_transport.h</includes>
    <includes local="yes">RF_ble.h</includes>
    <includes local="yes">btcontroller_util.h</includes>
    <includes local="yes">btcontroller_heap.h</includes>
    <includes local="yes">tomcrypt.h</includes>
    <includes local="yes">hci_controller.h</includes>
    <includes local="yes">common/debug.h</includes>
    <incdepgraph>
      <node id="3777">
        <label>stdarg.h</label>
      </node>
      <node id="3762">
        <label>os/os_type.h</label>
      </node>
      <node id="3758">
        <label>common/atomic.h</label>
      </node>
      <node id="3772">
        <label>common/lbuf.h</label>
      </node>
      <node id="3755">
        <label>common/list.h</label>
      </node>
      <node id="3761">
        <label>common/thread.h</label>
      </node>
      <node id="3764">
        <label>ble/ll_adv.h</label>
        <link refid="ll__adv_8h"/>
        <childnode refid="3756" relation="include">
        </childnode>
      </node>
      <node id="3752">
        <label>sfr.h</label>
      </node>
      <node id="3778">
        <label>h4_transport.h</label>
        <link refid="h4__transport_8h"/>
        <childnode refid="3754" relation="include">
        </childnode>
      </node>
      <node id="3784">
        <label>common/debug.h</label>
      </node>
      <node id="3780">
        <label>btcontroller_util.h</label>
      </node>
      <node id="3766">
        <label>ble/ll_init.h</label>
        <link refid="ll__init_8h"/>
        <childnode refid="3756" relation="include">
        </childnode>
      </node>
      <node id="3768">
        <label>data_extension.h</label>
        <link refid="data__extension_8h"/>
        <childnode refid="3754" relation="include">
        </childnode>
      </node>
      <node id="3771">
        <label>ble/ll_iso.h</label>
        <link refid="ll__iso_8h"/>
        <childnode refid="3759" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3761" relation="include">
        </childnode>
      </node>
      <node id="3779">
        <label>RF_ble.h</label>
      </node>
      <node id="3754">
        <label>typedef.h</label>
      </node>
      <node id="3781">
        <label>btcontroller_heap.h</label>
      </node>
      <node id="3760">
        <label>white_list.h</label>
        <link refid="white__list_8h"/>
        <childnode refid="3754" relation="include">
        </childnode>
      </node>
      <node id="3774">
        <label>audio_codec.h</label>
        <link refid="audio__codec_8h"/>
        <childnode refid="3759" relation="include">
        </childnode>
      </node>
      <node id="3751">
        <label>/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c</label>
        <link refid="ll_resolve_list.c"/>
        <childnode refid="3752" relation="include">
        </childnode>
        <childnode refid="3753" relation="include">
        </childnode>
        <childnode refid="3777" relation="include">
        </childnode>
        <childnode refid="3778" relation="include">
        </childnode>
        <childnode refid="3779" relation="include">
        </childnode>
        <childnode refid="3780" relation="include">
        </childnode>
        <childnode refid="3781" relation="include">
        </childnode>
        <childnode refid="3782" relation="include">
        </childnode>
        <childnode refid="3783" relation="include">
        </childnode>
        <childnode refid="3784" relation="include">
        </childnode>
      </node>
      <node id="3765">
        <label>ble/ll_scan.h</label>
        <link refid="ll__scan_8h"/>
        <childnode refid="3756" relation="include">
        </childnode>
      </node>
      <node id="3763">
        <label>ble/llcp.h</label>
        <link refid="llcp_8h"/>
        <childnode refid="3754" relation="include">
        </childnode>
        <childnode refid="3759" relation="include">
        </childnode>
      </node>
      <node id="3769">
        <label>multiple_phys.h</label>
        <link refid="multiple__phys_8h"/>
        <childnode refid="3754" relation="include">
        </childnode>
      </node>
      <node id="3767">
        <label>resolve_list.h</label>
        <link refid="resolve__list_8h"/>
        <childnode refid="3754" relation="include">
        </childnode>
      </node>
      <node id="3756">
        <label>ble_interface.h</label>
      </node>
      <node id="3782">
        <label>tomcrypt.h</label>
      </node>
      <node id="3770">
        <label>ble/ll_cte.h</label>
        <link refid="ll__cte_8h"/>
        <childnode refid="3759" relation="include">
        </childnode>
      </node>
      <node id="3783">
        <label>hci_controller.h</label>
      </node>
      <node id="3757">
        <label>common/sys_timer.h</label>
      </node>
      <node id="3753">
        <label>ble/link_layer.h</label>
        <link refid="link__layer_8h"/>
        <childnode refid="3754" relation="include">
        </childnode>
        <childnode refid="3755" relation="include">
        </childnode>
        <childnode refid="3756" relation="include">
        </childnode>
        <childnode refid="3757" relation="include">
        </childnode>
        <childnode refid="3758" relation="include">
        </childnode>
        <childnode refid="3759" relation="include">
        </childnode>
        <childnode refid="3760" relation="include">
        </childnode>
        <childnode refid="3761" relation="include">
        </childnode>
        <childnode refid="3762" relation="include">
        </childnode>
        <childnode refid="3763" relation="include">
        </childnode>
        <childnode refid="3764" relation="include">
        </childnode>
        <childnode refid="3765" relation="include">
        </childnode>
        <childnode refid="3766" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3768" relation="include">
        </childnode>
        <childnode refid="3769" relation="include">
        </childnode>
        <childnode refid="3770" relation="include">
        </childnode>
        <childnode refid="3771" relation="include">
        </childnode>
        <childnode refid="3773" relation="include">
        </childnode>
        <childnode refid="3775" relation="include">
        </childnode>
        <childnode refid="3776" relation="include">
        </childnode>
      </node>
      <node id="3759">
        <label>ll_defines.h</label>
        <link refid="ll__defines_8h"/>
        <childnode refid="3754" relation="include">
        </childnode>
      </node>
      <node id="3775">
        <label>ble/ll_cis.h</label>
        <link refid="ll__cis_8h"/>
        <childnode refid="3771" relation="include">
        </childnode>
        <childnode refid="3753" relation="include">
        </childnode>
      </node>
      <node id="3773">
        <label>ble/ll_bis.h</label>
        <link refid="ll__bis_8h"/>
        <childnode refid="3771" relation="include">
        </childnode>
        <childnode refid="3774" relation="include">
        </childnode>
      </node>
      <node id="3776">
        <label>ble/ll_pc.h</label>
        <link refid="ll__pc_8h"/>
        <childnode refid="3759" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structrpa" prot="public">rpa</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="ll__resolve__list_8c_1a6c6991cba0e2995d7d9aec73e0324317" prot="public" static="no">
        <name>LOG_TAG_CONST</name>
        <initializer>LL_RL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="11" column="9" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ll__resolve__list_8c_1a7ce0df38eb467e59f209470c8f5ac4e6" prot="public" static="no">
        <name>LOG_TAG</name>
        <initializer>&quot;[LL-RL]&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="12" column="9" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ll__resolve__list_8c_1a9eeb6e067100d0dec6e53bce19a403e0" prot="public" static="no">
        <name>LOG_ERROR_ENABLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="14" column="9" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ll__resolve__list_8c_1a69321c8a2a0b07a07fb5088e82e25eb0" prot="public" static="no">
        <name>LOG_INFO_ENABLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="15" column="9" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ll__resolve__list_8c_1a04135f631fe91199f05b1d816dda8756" prot="public" static="no">
        <name>LOG_DUMP_ENABLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="16" column="9" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ll__resolve__list_8c_1aeb3cf46e5bcf4641fdd900483a391889" prot="public" static="no">
        <name>AT_BLE_LL_CODE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="26" column="9" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structll__privacy" kindref="compound">ll_privacy</ref></type>
        <definition>struct ll_privacy le_privacy</definition>
        <argsstring></argsstring>
        <name>le_privacy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="29" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ll__resolve__list_8c_1a2fedcdf8e4e4c67cf6d2808b4090c38a" prot="public" static="yes" mutable="no">
        <type>u8</type>
        <definition>u8 ll_resolving_list_used</definition>
        <argsstring></argsstring>
        <name>ll_resolving_list_used</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="33" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ll__resolve__list_8c_1adb35b0b00ad69fcaacd17fe4d17ae54a" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structrpa" kindref="compound">rpa</ref></type>
        <definition>struct rpa rpa_set[]</definition>
        <argsstring>[]</argsstring>
        <name>rpa_set</name>
        <initializer>= {
    
    [0] = {
        .addr = {0x76, 0x41, 0x46, 0x31, 0x3a, 0x4d}, 
        .peer_irk = {0x74, 0x01, 0x90, 0x4A, 0xF7, 0x35, 0xA4, 0x38, 0xD3, 0x20, 0x9A, 0xCD, 0x48, 0xC0, 0x54, 0x40},
        .local_irk = {0xE6, 0xEA, 0xEE, 0x60, 0x31, 0x7B, 0xFC, 0xA2, 0x3F, 0xA5, 0x79, 0x59, 0xE7, 0x41, 0xCF, 0xC7},
    },
    [1] = {
        .addr = {0xA9, 0x3E, 0xD4, 0x37, 0xB5, 0x75}, 
        .peer_irk = {0x74, 0x01, 0x90, 0x4A, 0xF7, 0x35, 0xA4, 0x38, 0xD3, 0x20, 0x9A, 0xCD, 0x48, 0xC0, 0x54, 0x40},
    },
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="412" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="427" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ll__resolve__list_8c_1a9b431a1cec03acf0a8d2a9a294f59013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool device_addr_verify</definition>
        <argsstring>(const u8 *addr, u8 start, u8 len)</argsstring>
        <name>device_addr_verify</name>
        <param>
          <type>const u8 *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>u8</type>
          <declname>start</declname>
        </param>
        <param>
          <type>u8</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="29" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="901" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1a3cf3ef3a61def57734992da92bcfed3a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* __malloc</definition>
        <argsstring>(int size)</argsstring>
        <name>__malloc</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="35" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="35" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1a549f000748ba6d518db83deaeb9b235c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void __free</definition>
        <argsstring>(void *p)</argsstring>
        <name>__free</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="45" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1ad5579993f39287e4cfc126a3104f9baa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void __random48_update</definition>
        <argsstring>(void)</argsstring>
        <name>__random48_update</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="53" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="53" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1aa4cc2bbb7dc456497b2a87553024bef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void irk_enc</definition>
        <argsstring>(const u8 *irk, const u8 *prand, u8 *hash)</argsstring>
        <name>irk_enc</name>
        <param>
          <type>const u8 *</type>
          <declname>irk</declname>
        </param>
        <param>
          <type>const u8 *</type>
          <declname>prand</declname>
        </param>
        <param>
          <type>u8 *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="63" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="63" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1a10bd407ca223e2ada6cfac7e33721d19" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void device_addr_generate</definition>
        <argsstring>(u8 *addr, u8 *irk, u8 type)</argsstring>
        <name>device_addr_generate</name>
        <param>
          <type>u8 *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>u8 *</type>
          <declname>irk</declname>
        </param>
        <param>
          <type>u8</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="77" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="77" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1a9baba5308b4b68ef8657ac92a9fe7112" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void device_addr_resolve</definition>
        <argsstring>(u8 *irk, u8 *addr)</argsstring>
        <name>device_addr_resolve</name>
        <param>
          <type>u8 *</type>
          <declname>irk</declname>
        </param>
        <param>
          <type>u8 *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="112" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="112" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1a297db023b3f17c67c550d50c4b041a9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ll_resolve_list_IRK_verify</definition>
        <argsstring>(const u8 *irk)</argsstring>
        <name>ll_resolve_list_IRK_verify</name>
        <param>
          <type>const u8 *</type>
          <declname>irk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="124" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="124" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1afde9eb98c2aca78fa7c2ad77c84702c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structresolving__list" kindref="compound">resolving_list</ref> *</type>
        <definition>struct resolving_list* ll_resolving_list_match</definition>
        <argsstring>(const u8 addr_type, const u8 *addr)</argsstring>
        <name>ll_resolving_list_match</name>
        <param>
          <type>const u8</type>
          <declname>addr_type</declname>
        </param>
        <param>
          <type>const u8 *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="138" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="138" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1aace5ae90ef5953456bc4fcef842fb7f7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool __ll_non_resolvable_private_addr_verify</definition>
        <argsstring>(const u8 *addr)</argsstring>
        <name>__ll_non_resolvable_private_addr_verify</name>
        <param>
          <type>const u8 *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="153" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="153" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1acd62970c653a5dcdd75ff4829ddacd03" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void __set_ll_local_non_resolvable_private_addr</definition>
        <argsstring>(u8 *addr, struct resolving_list *resolving_list_t)</argsstring>
        <name>__set_ll_local_non_resolvable_private_addr</name>
        <param>
          <type>u8 *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structresolving__list" kindref="compound">resolving_list</ref> *</type>
          <declname>resolving_list_t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="166" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="166" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1a36aa017dc32cc5cae62bfbce9c9cbfc5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void __set_ll_peer_non_resolvable_private_addr</definition>
        <argsstring>(u8 *addr, struct resolving_list *resolving_list_t)</argsstring>
        <name>__set_ll_peer_non_resolvable_private_addr</name>
        <param>
          <type>u8 *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structresolving__list" kindref="compound">resolving_list</ref> *</type>
          <declname>resolving_list_t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="177" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="177" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1a3b6f5d27d5c4368a895e4b2fd1a8a889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_resolve_list_set_local_RPA</definition>
        <argsstring>(u8 *addr, struct resolving_list *resolving_list_t)</argsstring>
        <name>ll_resolve_list_set_local_RPA</name>
        <param>
          <type>u8 *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structresolving__list" kindref="compound">resolving_list</ref> *</type>
          <declname>resolving_list_t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="191" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="191" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1a0246ce47acd493dd58761f16ca1aa5b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_resolve_list_set_peer_RPA</definition>
        <argsstring>(u8 *addr, struct resolving_list *resolving_list_t)</argsstring>
        <name>ll_resolve_list_set_peer_RPA</name>
        <param>
          <type>u8 *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structresolving__list" kindref="compound">resolving_list</ref> *</type>
          <declname>resolving_list_t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="205" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="205" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1a6b607a52c88f6fa64a6633ce7facfaed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structresolving__list" kindref="compound">resolving_list</ref> *</type>
        <definition>struct resolving_list* ll_resolve_peer_addr</definition>
        <argsstring>(const u8 *addr)</argsstring>
        <name>ll_resolve_peer_addr</name>
        <param>
          <type>const u8 *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="219" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="219" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1acfec6138d2ca732b3d23cc8203c4c106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structresolving__list" kindref="compound">resolving_list</ref> *</type>
        <definition>struct resolving_list* ll_resolve_local_addr</definition>
        <argsstring>(const u8 *addr)</argsstring>
        <name>ll_resolve_local_addr</name>
        <param>
          <type>const u8 *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="245" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="245" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1a7965dc9baa665f198857d3018da55063" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ll_RPA_timeout_handler</definition>
        <argsstring>(sys_timer *timer)</argsstring>
        <name>ll_RPA_timeout_handler</name>
        <param>
          <type>sys_timer *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="273" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="273" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1aa2ccaaf8c818babb07b91a12462edd29" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ll_RPA_timeout_start</definition>
        <argsstring>(u32 timeout)</argsstring>
        <name>ll_RPA_timeout_start</name>
        <param>
          <type>u32</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="282" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="282" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1acaf739616417f3417b60238516526b1b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ll_RPA_timeout_stop</definition>
        <argsstring>(void)</argsstring>
        <name>ll_RPA_timeout_stop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="294" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="294" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1acbf778419447e0c5af9fb216e9c8e6b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_resolving_list_init</definition>
        <argsstring>(void)</argsstring>
        <name>ll_resolving_list_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="302" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="302" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1ad3206fa834723b7ebd7c26e8c5237f6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_resolving_list_add</definition>
        <argsstring>(const u8 *data)</argsstring>
        <name>ll_resolving_list_add</name>
        <param>
          <type>const u8 *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="308" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="308" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1aa2139825e64cc23306a5d58ce08ed0ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_resolving_list_remove</definition>
        <argsstring>(const u8 *data)</argsstring>
        <name>ll_resolving_list_remove</name>
        <param>
          <type>const u8 *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="337" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="337" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1acec5917f59a9e58296e3d947a4b5bd87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_read_peer_resolvable_address</definition>
        <argsstring>(const u8 addr_type, const u8 *addr, u8 *peer_PRA)</argsstring>
        <name>ll_read_peer_resolvable_address</name>
        <param>
          <type>const u8</type>
          <declname>addr_type</declname>
        </param>
        <param>
          <type>const u8 *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>u8 *</type>
          <declname>peer_PRA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="351" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="351" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1aa1f97b55016f2d0dc51496c7fae54d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_read_local_resolvable_address</definition>
        <argsstring>(const u8 addr_type, const u8 *addr, u8 *local_PRA)</argsstring>
        <name>ll_read_local_resolvable_address</name>
        <param>
          <type>const u8</type>
          <declname>addr_type</declname>
        </param>
        <param>
          <type>const u8 *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>u8 *</type>
          <declname>local_PRA</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="366" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="366" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1aa54c2f9f169c3e9249622cf95db49ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_set_resolvable_private_address_timeout</definition>
        <argsstring>(const u8 *data)</argsstring>
        <name>ll_set_resolvable_private_address_timeout</name>
        <param>
          <type>const u8 *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="381" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="381" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1aa54a6a5427731f52ee9313b36fd4ed59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_resolution_enable</definition>
        <argsstring>(void)</argsstring>
        <name>ll_resolution_enable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="392" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="392" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1ae8f2dde34376952c7cee67706e303537" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ll_resolvable_private_addr_verify</definition>
        <argsstring>(const u8 *addr)</argsstring>
        <name>ll_resolvable_private_addr_verify</name>
        <param>
          <type>const u8 *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="403" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="403" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1abc3e4d56810bad81718c75f07fc2262d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_resolution_disable</definition>
        <argsstring>(void)</argsstring>
        <name>ll_resolution_disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="412" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="412" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1aaaf6f0dd097fe395e6f54b3a860e6e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> void</type>
        <definition>AT_BLE_LL_CODE void debug_ll_privacy</definition>
        <argsstring>(void)</argsstring>
        <name>debug_ll_privacy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="441" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="441" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="ll__resolve__list_8c_1aab0e7b5191af9f0feddc4722e643d558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_vendor_device_address_generate</definition>
        <argsstring>(u8 *addr, u8 *irk, u8 type)</argsstring>
        <name>ll_vendor_device_address_generate</name>
        <param>
          <type>u8 *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>u8 *</type>
          <declname>irk</declname>
        </param>
        <param>
          <type>u8</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" line="493" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c" bodystart="493" bodyend="533"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;sfr.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="link__layer_8h" kindref="compound">ble/link_layer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stdarg.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="h4__transport_8h" kindref="compound">h4_transport.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RF_ble.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;btcontroller_util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;btcontroller_heap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tomcrypt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hci_controller.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_TAG_CONST<sp/><sp/><sp/><sp/><sp/>LL_RL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_TAG<sp/><sp/><sp/><sp/><sp/>&quot;[LL-RL]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_ERROR_ENABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INFO_ENABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_DUMP_ENABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;common/debug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SUPPORT_MS_EXTENSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>bss_seg(&quot;.ble_ll_bss&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>data_seg(&quot;.ble_ll_data&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>const_seg(&quot;.ble_ll_const&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>code_seg(&quot;.ble_ll_code&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AT_BLE_LL_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1a9b431a1cec03acf0a8d2a9a294f59013" kindref="member">device_addr_verify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*addr,<sp/>u8<sp/>start,<sp/>u8<sp/>len);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structll__privacy" kindref="compound">ll_privacy</ref><sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>u8<sp/><ref refid="ll__resolve__list_8c_1a2fedcdf8e4e4c67cf6d2808b4090c38a" kindref="member">ll_resolving_list_used</ref><sp/>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="ll__resolve__list_8c_1a3cf3ef3a61def57734992da92bcfed3a" kindref="member">__malloc</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>btctler_nv_memory_malloc(size);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(p<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1a549f000748ba6d518db83deaeb9b235c" kindref="member">__free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>btctler_nv_memory_free(p);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Privacy(resolving<sp/>list)</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1ad5579993f39287e4cfc126a3104f9baa" kindref="member">__random48_update</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>i;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a08817ebe8730c3da12f8fb80fd7db775" kindref="member">random48</ref>[i++]<sp/>=<sp/>JL_RAND-&gt;R64L;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a08817ebe8730c3da12f8fb80fd7db775" kindref="member">random48</ref>[i++]<sp/>=<sp/>JL_RAND-&gt;R64H;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1aa4cc2bbb7dc456497b2a87553024bef2" kindref="member">irk_enc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*irk,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*prand,<sp/>u8<sp/>*hash)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>r[16];</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>ah[16];</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(r,<sp/>0x0,<sp/>16);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//padding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(r,<sp/>prand,<sp/>3);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>aes128_start((u8<sp/>*)irk,<sp/>r,<sp/>ah);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(hash,<sp/>ah,<sp/>3);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1a10bd407ca223e2ada6cfac7e33721d19" kindref="member">device_addr_generate</ref>(u8<sp/>*addr,<sp/>u8<sp/>*irk,<sp/>u8<sp/>type)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>two<sp/>most<sp/>significant<sp/>bits<sp/>of<sp/>the<sp/>address<sp/>shall<sp/>be<sp/>equal<sp/>to<sp/>1<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="link__layer_8h_1a05589fbab0657f08285ebdfe93f5ec9ea128b932469d105082104bd48f43fd6eb" kindref="member">STATIC_DEVICE_ADDR</ref>:</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>device<sp/>may<sp/>choose<sp/>to<sp/>initialize<sp/>its<sp/>static<sp/>address<sp/>to<sp/>a<sp/>new<sp/>value<sp/>after<sp/>each<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>power<sp/>cycle.<sp/>A<sp/>device<sp/>shall<sp/>not<sp/>change<sp/>its<sp/>static<sp/>address<sp/>value<sp/>once<sp/>initialized<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>until<sp/>the<sp/>device<sp/>is<sp/>power<sp/>cycled.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a08817ebe8730c3da12f8fb80fd7db775" kindref="member">random48</ref>[5]<sp/>|=<sp/>0xc0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(addr,<sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a08817ebe8730c3da12f8fb80fd7db775" kindref="member">random48</ref>,<sp/>6);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>two<sp/>most<sp/>significant<sp/>bits<sp/>of<sp/>the<sp/>address<sp/>shall<sp/>be<sp/>equal<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>address<sp/>shall<sp/>not<sp/>be<sp/>equal<sp/>to<sp/>the<sp/>public<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="link__layer_8h_1a05589fbab0657f08285ebdfe93f5ec9ea67e990ab36540fd3728a04a51101fa86" kindref="member">NON_RESOLVABLE_PRIVATE_ADDR</ref>:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a08817ebe8730c3da12f8fb80fd7db775" kindref="member">random48</ref>[5]<sp/>&amp;=<sp/>~0xc0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(addr,<sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a08817ebe8730c3da12f8fb80fd7db775" kindref="member">random48</ref>,<sp/>6);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>two<sp/>most<sp/>significant<sp/>bits<sp/>of<sp/>rand<sp/>shall<sp/>be<sp/>equal<sp/>to<sp/>0<sp/>and<sp/>1<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="link__layer_8h_1a05589fbab0657f08285ebdfe93f5ec9ea69f78ff96db4e0030c159a26c854d522" kindref="member">RESOLVABLE_PRIVATE_ADDR</ref>:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hash<sp/>=<sp/>ah(irk,<sp/>ple_privacy.random48);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//LSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a08817ebe8730c3da12f8fb80fd7db775" kindref="member">random48</ref>[2]<sp/>&amp;=<sp/>~0xc0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a08817ebe8730c3da12f8fb80fd7db775" kindref="member">random48</ref>[2]<sp/>|=<sp/>0x40;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1aa4cc2bbb7dc456497b2a87553024bef2" kindref="member">irk_enc</ref>(irk,<sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a08817ebe8730c3da12f8fb80fd7db775" kindref="member">random48</ref>,<sp/>addr);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//MSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(addr<sp/>+<sp/>3,<sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a08817ebe8730c3da12f8fb80fd7db775" kindref="member">random48</ref>,<sp/>3);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>memcpy(addr,<sp/>hash,<sp/>3);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1a9baba5308b4b68ef8657ac92a9fe7112" kindref="member">device_addr_resolve</ref>(u8<sp/>*irk,<sp/>u8<sp/>*addr)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>type;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>addr[5]<sp/>&amp;<sp/>0xc0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>&gt;&gt;=<sp/>6;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/><ref refid="link__layer_8h_1a05589fbab0657f08285ebdfe93f5ec9ea69f78ff96db4e0030c159a26c854d522" kindref="member">RESOLVABLE_PRIVATE_ADDR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1a297db023b3f17c67c550d50c4b041a9a" kindref="member">ll_resolve_list_IRK_verify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*irk)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>i;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>sum;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>sum<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>|=<sp/>irk[i];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>not<sp/>all<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(sum)<sp/>?<sp/>TRUE<sp/>:<sp/>FALSE;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structresolving__list" kindref="compound">resolving_list</ref><sp/>*<ref refid="ll__resolve__list_8c_1afde9eb98c2aca78fa7c2ad77c84702c4" kindref="member">ll_resolving_list_match</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>addr_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*addr)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structresolving__list" kindref="compound">resolving_list</ref><sp/>*p,<sp/>*n;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(addr<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(p,<sp/>n,<sp/>&amp;<ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1a6cf35dd62cf098844024207d0b4b0b55" kindref="member">resolving_list_head</ref>,<sp/><ref refid="structresolving__list_1a40bb1d4f97437474544f9afb269f8d60" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!memcmp(addr,<sp/>p-&gt;<ref refid="structresolving__list_1ab0e3085d46800278307f1ed504939f10" kindref="member">resolving_list_param</ref>.<ref refid="structresolving__list__parameter_1a1949b335de50c67f5d13cf434304a603" kindref="member">Peer_Identity_Address</ref>,<sp/>6))<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(p-&gt;<ref refid="structresolving__list_1ab0e3085d46800278307f1ed504939f10" kindref="member">resolving_list_param</ref>.<ref refid="structresolving__list__parameter_1adfc3b04f4e4ee4f0a0734851ed57da00" kindref="member">Peer_Identity_Address_Type</ref><sp/>==<sp/>addr_type))<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1aace5ae90ef5953456bc4fcef842fb7f7" kindref="member">__ll_non_resolvable_private_addr_verify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*addr)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>two<sp/>most<sp/>significant<sp/>bits<sp/>of<sp/>the<sp/>address<sp/>shall<sp/>be<sp/>equal<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((addr[5]<sp/>&amp;<sp/>0xC0)<sp/>!=<sp/>0x00)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>address<sp/>shall<sp/>not<sp/>be<sp/>equal<sp/>to<sp/>the<sp/>public<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memcmp(addr,<sp/><ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1a477178f513d2c4df134d2b4e88b132fd" kindref="member">public_address</ref>,<sp/>6))<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1a9b431a1cec03acf0a8d2a9a294f59013" kindref="member">device_addr_verify</ref>(addr,<sp/>0,<sp/>6);</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1acd62970c653a5dcdd75ff4829ddacd03" kindref="member">__set_ll_local_non_resolvable_private_addr</ref>(u8<sp/>*addr,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structresolving__list" kindref="compound">resolving_list</ref><sp/>*resolving_list_t)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(resolving_list_t<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a10bd407ca223e2ada6cfac7e33721d19" kindref="member">device_addr_generate</ref>(resolving_list_t-&gt;<ref refid="structresolving__list_1a9a3a770532b382ad65e328d4558eece9" kindref="member">local_PRA</ref>,<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="link__layer_8h_1a05589fbab0657f08285ebdfe93f5ec9ea67e990ab36540fd3728a04a51101fa86" kindref="member">NON_RESOLVABLE_PRIVATE_ADDR</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(addr,<sp/>resolving_list_t-&gt;<ref refid="structresolving__list_1a9a3a770532b382ad65e328d4558eece9" kindref="member">local_PRA</ref>,<sp/>6);</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1a36aa017dc32cc5cae62bfbce9c9cbfc5" kindref="member">__set_ll_peer_non_resolvable_private_addr</ref>(u8<sp/>*addr,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structresolving__list" kindref="compound">resolving_list</ref><sp/>*resolving_list_t)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(resolving_list_t<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a10bd407ca223e2ada6cfac7e33721d19" kindref="member">device_addr_generate</ref>(resolving_list_t-&gt;<ref refid="structresolving__list_1a9eb5c175877889a123a496180ac06323" kindref="member">peer_PRA</ref>,<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="link__layer_8h_1a05589fbab0657f08285ebdfe93f5ec9ea67e990ab36540fd3728a04a51101fa86" kindref="member">NON_RESOLVABLE_PRIVATE_ADDR</ref>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(addr,<sp/>resolving_list_t-&gt;<ref refid="structresolving__list_1a9eb5c175877889a123a496180ac06323" kindref="member">peer_PRA</ref>,<sp/>6);</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1a3b6f5d27d5c4368a895e4b2fd1a8a889" kindref="member">ll_resolve_list_set_local_RPA</ref>(u8<sp/>*addr,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structresolving__list" kindref="compound">resolving_list</ref><sp/>*resolving_list_t)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(resolving_list_t<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT((<ref refid="ll__resolve__list_8c_1a297db023b3f17c67c550d50c4b041a9a" kindref="member">ll_resolve_list_IRK_verify</ref>(resolving_list_t-&gt;<ref refid="structresolving__list_1ab0e3085d46800278307f1ed504939f10" kindref="member">resolving_list_param</ref>.<ref refid="structresolving__list__parameter_1adf9ce025198ad79f47dab65d383a98c5" kindref="member">Local_IRK</ref>)<sp/>==<sp/>TRUE),<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a10bd407ca223e2ada6cfac7e33721d19" kindref="member">device_addr_generate</ref>(resolving_list_t-&gt;<ref refid="structresolving__list_1a9a3a770532b382ad65e328d4558eece9" kindref="member">local_PRA</ref>,<sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resolving_list_t-&gt;<ref refid="structresolving__list_1ab0e3085d46800278307f1ed504939f10" kindref="member">resolving_list_param</ref>.<ref refid="structresolving__list__parameter_1adf9ce025198ad79f47dab65d383a98c5" kindref="member">Local_IRK</ref>,<sp/><ref refid="link__layer_8h_1a05589fbab0657f08285ebdfe93f5ec9ea69f78ff96db4e0030c159a26c854d522" kindref="member">RESOLVABLE_PRIVATE_ADDR</ref>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(addr,<sp/>resolving_list_t-&gt;<ref refid="structresolving__list_1a9a3a770532b382ad65e328d4558eece9" kindref="member">local_PRA</ref>,<sp/>6);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1a0246ce47acd493dd58761f16ca1aa5b3" kindref="member">ll_resolve_list_set_peer_RPA</ref>(u8<sp/>*addr,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structresolving__list" kindref="compound">resolving_list</ref><sp/>*resolving_list_t)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(resolving_list_t<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT((<ref refid="ll__resolve__list_8c_1a297db023b3f17c67c550d50c4b041a9a" kindref="member">ll_resolve_list_IRK_verify</ref>(resolving_list_t-&gt;<ref refid="structresolving__list_1ab0e3085d46800278307f1ed504939f10" kindref="member">resolving_list_param</ref>.<ref refid="structresolving__list__parameter_1a94bb1b7a68089f95cf0bc9d4719b7e43" kindref="member">Peer_IRK</ref>)<sp/>==<sp/>TRUE),<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a10bd407ca223e2ada6cfac7e33721d19" kindref="member">device_addr_generate</ref>(resolving_list_t-&gt;<ref refid="structresolving__list_1a9eb5c175877889a123a496180ac06323" kindref="member">peer_PRA</ref>,<sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resolving_list_t-&gt;<ref refid="structresolving__list_1ab0e3085d46800278307f1ed504939f10" kindref="member">resolving_list_param</ref>.<ref refid="structresolving__list__parameter_1a94bb1b7a68089f95cf0bc9d4719b7e43" kindref="member">Peer_IRK</ref>,<sp/><ref refid="link__layer_8h_1a05589fbab0657f08285ebdfe93f5ec9ea69f78ff96db4e0030c159a26c854d522" kindref="member">RESOLVABLE_PRIVATE_ADDR</ref>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(addr,<sp/>resolving_list_t-&gt;<ref refid="structresolving__list_1a9eb5c175877889a123a496180ac06323" kindref="member">peer_PRA</ref>,<sp/>6);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structresolving__list" kindref="compound">resolving_list</ref><sp/>*<ref refid="ll__resolve__list_8c_1a6b607a52c88f6fa64a6633ce7facfaed" kindref="member">ll_resolve_peer_addr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*addr)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structresolving__list" kindref="compound">resolving_list</ref><sp/>*p;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>hash[3];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Address<sp/>is<sp/>RPA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;conn_receive_adv_addr<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>btctler_bd_addr_to_str((u8<sp/>*)addr));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="ll__resolve__list_8c_1ae8f2dde34376952c7cee67706e303537" kindref="member">ll_resolvable_private_addr_verify</ref>(addr)<sp/>==<sp/>FALSE)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;peer<sp/>addr<sp/>format<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry(p,<sp/>&amp;<ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1a6cf35dd62cf098844024207d0b4b0b55" kindref="member">resolving_list_head</ref>,<sp/><ref refid="structresolving__list_1a40bb1d4f97437474544f9afb269f8d60" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1aa4cc2bbb7dc456497b2a87553024bef2" kindref="member">irk_enc</ref>(p-&gt;<ref refid="structresolving__list_1ab0e3085d46800278307f1ed504939f10" kindref="member">resolving_list_param</ref>.<ref refid="structresolving__list__parameter_1a94bb1b7a68089f95cf0bc9d4719b7e43" kindref="member">Peer_IRK</ref>,<sp/>addr<sp/>+<sp/>3,<sp/>hash);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//localHash<sp/>match<sp/>peer<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memcmp(hash,<sp/>addr,<sp/>3))<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//try<sp/>all<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;RPA<sp/>resolved<sp/>fail&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structresolving__list" kindref="compound">resolving_list</ref><sp/>*<ref refid="ll__resolve__list_8c_1acfec6138d2ca732b3d23cc8203c4c106" kindref="member">ll_resolve_local_addr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*addr)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structresolving__list" kindref="compound">resolving_list</ref><sp/>*p;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>hash[3];</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Address<sp/>is<sp/>RPA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="ll__resolve__list_8c_1ae8f2dde34376952c7cee67706e303537" kindref="member">ll_resolvable_private_addr_verify</ref>(addr)<sp/>==<sp/>FALSE)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;ll<sp/>resolve<sp/>local<sp/>addr<sp/>format<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry(p,<sp/>&amp;<ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1a6cf35dd62cf098844024207d0b4b0b55" kindref="member">resolving_list_head</ref>,<sp/><ref refid="structresolving__list_1a40bb1d4f97437474544f9afb269f8d60" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1aa4cc2bbb7dc456497b2a87553024bef2" kindref="member">irk_enc</ref>(p-&gt;<ref refid="structresolving__list_1ab0e3085d46800278307f1ed504939f10" kindref="member">resolving_list_param</ref>.<ref refid="structresolving__list__parameter_1adf9ce025198ad79f47dab65d383a98c5" kindref="member">Local_IRK</ref>,<sp/>addr<sp/>+<sp/>3,<sp/>hash);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//localHash<sp/>match<sp/>peer<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memcmp(hash,<sp/>addr,<sp/>3))<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//try<sp/>all<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1a7965dc9baa665f198857d3018da55063" kindref="member">ll_RPA_timeout_handler</ref>(sys_timer<sp/>*<ref refid="llcp__sm__pc_8c_1a2f0cdb43f1c9024afabfab4d9ee48f5e" kindref="member">timer</ref>)</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;TO<sp/>-----LL<sp/>RPA<sp/>Timeout&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1ad5579993f39287e4cfc126a3104f9baa" kindref="member">__random48_update</ref>();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__adv_8c_1a3a20204536d2416ec4733f134d946cdd" kindref="member">ll_adv_local_addr_refresh</ref>();</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1aa2ccaaf8c818babb07b91a12462edd29" kindref="member">ll_RPA_timeout_start</ref>(u32<sp/>timeout)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>ll<sp/>RPA<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;RPA<sp/>timeout<sp/>%x&quot;</highlight><highlight class="normal">,<sp/>timeout);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1afb31904d23f7d7f22fec0230e87a2b1d" kindref="member">RPA_timeout</ref><sp/>=<sp/>sys_timer_register_periodic(timeout,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<ref refid="ll__resolve__list_8c_1a7965dc9baa665f198857d3018da55063" kindref="member">ll_RPA_timeout_handler</ref>);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(<ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1afb31904d23f7d7f22fec0230e87a2b1d" kindref="member">RPA_timeout</ref>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sys_timer_set_user(&amp;le_privacy.RPA_timeout,<sp/>link);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1acaf739616417f3417b60238516526b1b" kindref="member">ll_RPA_timeout_stop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1afb31904d23f7d7f22fec0230e87a2b1d" kindref="member">RPA_timeout</ref>)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_timer_remove(<ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1afb31904d23f7d7f22fec0230e87a2b1d" kindref="member">RPA_timeout</ref>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1afb31904d23f7d7f22fec0230e87a2b1d" kindref="member">RPA_timeout</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1acbf778419447e0c5af9fb216e9c8e6b6" kindref="member">ll_resolving_list_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a2fedcdf8e4e4c67cf6d2808b4090c38a" kindref="member">ll_resolving_list_used</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;<ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1a6cf35dd62cf098844024207d0b4b0b55" kindref="member">resolving_list_head</ref>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1ad3206fa834723b7ebd7c26e8c5237f6f" kindref="member">ll_resolving_list_add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*data)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structresolving__list" kindref="compound">resolving_list</ref><sp/>*list;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="ll__resolve__list_8c_1a2fedcdf8e4e4c67cf6d2808b4090c38a" kindref="member">ll_resolving_list_used</ref><sp/>==<sp/><ref refid="resolve__list_8h_1a13873db6a30bdecf4da8caf8d6d43caa" kindref="member">LL_RESOLVING_LIST_SIZE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>list<sp/>=<sp/><sp/><ref refid="ll__resolve__list_8c_1a3cf3ef3a61def57734992da92bcfed3a" kindref="member">__malloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structresolving__list" kindref="compound">resolving_list</ref>));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(list<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy((u8<sp/>*)&amp;list-&gt;<ref refid="structresolving__list_1ab0e3085d46800278307f1ed504939f10" kindref="member">resolving_list_param</ref>,<sp/>data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structresolving__list__parameter" kindref="compound">resolving_list_parameter</ref>));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Device<sp/>privacy<sp/>is<sp/>violated<sp/>when<sp/>all<sp/>zero<sp/>IRKs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ASSERT(((__resolve_list_IRK_verify(list-&gt;resolving_list_param.Local_IRK)<sp/>==<sp/>TRUE)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&amp;&amp;(__resolve_list_IRK_verify(list-&gt;resolving_list_param.Peer_IRK)<sp/>==<sp/>TRUE)),<sp/>&quot;%s&quot;,<sp/>__func__);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;<sp/>----------Resolving<sp/>List<sp/>--------------&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;addr<sp/>type<sp/>:<sp/>%x&quot;</highlight><highlight class="normal">,<sp/>list-&gt;<ref refid="structresolving__list_1ab0e3085d46800278307f1ed504939f10" kindref="member">resolving_list_param</ref>.<ref refid="structresolving__list__parameter_1adfc3b04f4e4ee4f0a0734851ed57da00" kindref="member">Peer_Identity_Address_Type</ref>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;addr<sp/>:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>btctler_bd_addr_to_str(list-&gt;<ref refid="structresolving__list_1ab0e3085d46800278307f1ed504939f10" kindref="member">resolving_list_param</ref>.<ref refid="structresolving__list__parameter_1a1949b335de50c67f5d13cf434304a603" kindref="member">Peer_Identity_Address</ref>));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;local<sp/>IRK<sp/>:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info_hexdump(list-&gt;<ref refid="structresolving__list_1ab0e3085d46800278307f1ed504939f10" kindref="member">resolving_list_param</ref>.<ref refid="structresolving__list__parameter_1adf9ce025198ad79f47dab65d383a98c5" kindref="member">Local_IRK</ref>,<sp/>16);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;peer<sp/>IRK<sp/>:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info_hexdump(list-&gt;<ref refid="structresolving__list_1ab0e3085d46800278307f1ed504939f10" kindref="member">resolving_list_param</ref>.<ref refid="structresolving__list__parameter_1a94bb1b7a68089f95cf0bc9d4719b7e43" kindref="member">Peer_IRK</ref>,<sp/>16);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add_tail(&amp;list-&gt;<ref refid="structresolving__list_1a40bb1d4f97437474544f9afb269f8d60" kindref="member">entry</ref>,<sp/>&amp;<ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1a6cf35dd62cf098844024207d0b4b0b55" kindref="member">resolving_list_head</ref>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a2fedcdf8e4e4c67cf6d2808b4090c38a" kindref="member">ll_resolving_list_used</ref>++;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;<sp/>----------Resolving<sp/>List<sp/>End--------------&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1aa2139825e64cc23306a5d58ce08ed0ac" kindref="member">ll_resolving_list_remove</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*data)</highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structresolving__list" kindref="compound">resolving_list</ref><sp/>*p,<sp/>*n;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(p,<sp/>n,<sp/>&amp;<ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1a6cf35dd62cf098844024207d0b4b0b55" kindref="member">resolving_list_head</ref>,<sp/><ref refid="structresolving__list_1a40bb1d4f97437474544f9afb269f8d60" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!memcmp(data<sp/>+<sp/>1,<sp/>p-&gt;<ref refid="structresolving__list_1ab0e3085d46800278307f1ed504939f10" kindref="member">resolving_list_param</ref>.<ref refid="structresolving__list__parameter_1a1949b335de50c67f5d13cf434304a603" kindref="member">Peer_Identity_Address</ref>,<sp/>6))<sp/>\</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(p-&gt;<ref refid="structresolving__list_1ab0e3085d46800278307f1ed504939f10" kindref="member">resolving_list_param</ref>.<ref refid="structresolving__list__parameter_1adfc3b04f4e4ee4f0a0734851ed57da00" kindref="member">Peer_Identity_Address_Type</ref><sp/>==<sp/>data[0]))<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a2fedcdf8e4e4c67cf6d2808b4090c38a" kindref="member">ll_resolving_list_used</ref>--;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;p-&gt;<ref refid="structresolving__list_1a40bb1d4f97437474544f9afb269f8d60" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a549f000748ba6d518db83deaeb9b235c" kindref="member">__free</ref>(p);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1acec5917f59a9e58296e3d947a4b5bd87" kindref="member">ll_read_peer_resolvable_address</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>addr_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*addr,<sp/>u8<sp/>*<ref refid="structresolving__list_1a9eb5c175877889a123a496180ac06323" kindref="member">peer_PRA</ref>)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structresolving__list" kindref="compound">resolving_list</ref><sp/>*resolving_list_t;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>resolving_list_t<sp/>=<sp/><ref refid="ll__resolve__list_8c_1afde9eb98c2aca78fa7c2ad77c84702c4" kindref="member">ll_resolving_list_match</ref>(addr_type,<sp/>addr);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resolving_list_t<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Unknow<sp/>Connection<sp/>Identifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;-<sp/>No<sp/>resolving<sp/>list<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(peer_PRA,<sp/>resolving_list_t-&gt;<ref refid="structresolving__list_1a9eb5c175877889a123a496180ac06323" kindref="member">peer_PRA</ref>,<sp/>6);</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1aa1f97b55016f2d0dc51496c7fae54d63" kindref="member">ll_read_local_resolvable_address</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>addr_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*addr,<sp/>u8<sp/>*<ref refid="structresolving__list_1a9a3a770532b382ad65e328d4558eece9" kindref="member">local_PRA</ref>)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structresolving__list" kindref="compound">resolving_list</ref><sp/>*resolving_list_t;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>resolving_list_t<sp/>=<sp/><ref refid="ll__resolve__list_8c_1afde9eb98c2aca78fa7c2ad77c84702c4" kindref="member">ll_resolving_list_match</ref>(addr_type,<sp/>addr);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resolving_list_t<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Unknow<sp/>Connection<sp/>Identifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;-<sp/>No<sp/>resolving<sp/>list<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(local_PRA,<sp/>resolving_list_t-&gt;<ref refid="structresolving__list_1a9a3a770532b382ad65e328d4558eece9" kindref="member">local_PRA</ref>,<sp/>6);</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1aa54c2f9f169c3e9249622cf95db49ecf" kindref="member">ll_set_resolvable_private_address_timeout</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*data)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//remove<sp/>already<sp/>exsit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1acaf739616417f3417b60238516526b1b" kindref="member">ll_RPA_timeout_stop</ref>();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a11d2f05636a73ae8147c6fca8a7f9db7" kindref="member">RPA_timeout_cnt</ref><sp/>=<sp/>btctler_little_endian_read_16(data,<sp/>0);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a11d2f05636a73ae8147c6fca8a7f9db7" kindref="member">RPA_timeout_cnt</ref><sp/>=<sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a11d2f05636a73ae8147c6fca8a7f9db7" kindref="member">RPA_timeout_cnt</ref><sp/>*<sp/>1000;<sp/></highlight><highlight class="comment">//1SEC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1aa2ccaaf8c818babb07b91a12462edd29" kindref="member">ll_RPA_timeout_start</ref>(<ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a11d2f05636a73ae8147c6fca8a7f9db7" kindref="member">RPA_timeout_cnt</ref>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1aa54a6a5427731f52ee9313b36fd4ed59" kindref="member">ll_resolution_enable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a11d2f05636a73ae8147c6fca8a7f9db7" kindref="member">RPA_timeout_cnt</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a11d2f05636a73ae8147c6fca8a7f9db7" kindref="member">RPA_timeout_cnt</ref><sp/>=<sp/>15<sp/>*<sp/>60<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1ad5579993f39287e4cfc126a3104f9baa" kindref="member">__random48_update</ref>();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1aa2ccaaf8c818babb07b91a12462edd29" kindref="member">ll_RPA_timeout_start</ref>(<ref refid="ll__resolve__list_8c_1a672d9679dbf70a156b69cf50089779ea" kindref="member">le_privacy</ref>.<ref refid="structll__privacy_1a11d2f05636a73ae8147c6fca8a7f9db7" kindref="member">RPA_timeout_cnt</ref>);<sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>every<sp/>15mins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1ae8f2dde34376952c7cee67706e303537" kindref="member">ll_resolvable_private_addr_verify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*addr)</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>two<sp/>most<sp/>significant<sp/>bits<sp/>of<sp/>the<sp/>address<sp/>shall<sp/>be<sp/>equal<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((addr[5]<sp/>&amp;<sp/>0xC0)<sp/>!=<sp/>0x40)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1a9b431a1cec03acf0a8d2a9a294f59013" kindref="member">device_addr_verify</ref>(addr,<sp/>3,<sp/>3);</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1abc3e4d56810bad81718c75f07fc2262d" kindref="member">ll_resolution_disable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LE_FEATURES_IS_SUPPORT(LL_PRIVACY))<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1a5bdacdddf7fdfd7b6884dca794bb3767" kindref="member">resolution_enable</ref>)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1acaf739616417f3417b60238516526b1b" kindref="member">ll_RPA_timeout_stop</ref>();</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421" refid="structrpa" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrpa" kindref="compound">rpa</ref><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>addr[6];</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/><ref refid="structrpa_1ac19cde4255bfa356f2a7ae8339798e2a" kindref="member">peer_irk</ref>[16];</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/><ref refid="structrpa_1a8216ae6387c768a89a928ae84c85d7d9" kindref="member">local_irk</ref>[16];</highlight></codeline>
<codeline lineno="425"><highlight class="normal">};</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrpa" kindref="compound">rpa</ref><sp/>rpa_set[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Nexus<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>[0]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structrpa_1a0599835e6a665f3a726c6d2f870d4361" kindref="member">addr</ref><sp/>=<sp/>{0x76,<sp/>0x41,<sp/>0x46,<sp/>0x31,<sp/>0x3a,<sp/>0x4d},<sp/></highlight><highlight class="comment">//LSB-&gt;MSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.peer_irk<sp/>=<sp/>{0x74,<sp/>0x01,<sp/>0x90,<sp/>0x4A,<sp/>0xF7,<sp/>0x35,<sp/>0xA4,<sp/>0x38,<sp/>0xD3,<sp/>0x20,<sp/>0x9A,<sp/>0xCD,<sp/>0x48,<sp/>0xC0,<sp/>0x54,<sp/>0x40},</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.local_irk<sp/>=<sp/>{0xE6,<sp/>0xEA,<sp/>0xEE,<sp/>0x60,<sp/>0x31,<sp/>0x7B,<sp/>0xFC,<sp/>0xA2,<sp/>0x3F,<sp/>0xA5,<sp/>0x79,<sp/>0x59,<sp/>0xE7,<sp/>0x41,<sp/>0xCF,<sp/>0xC7},</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>[1]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addr<sp/>=<sp/>{0xA9,<sp/>0x3E,<sp/>0xD4,<sp/>0x37,<sp/>0xB5,<sp/>0x75},<sp/></highlight><highlight class="comment">//LSB-&gt;MSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.peer_irk<sp/>=<sp/>{0x74,<sp/>0x01,<sp/>0x90,<sp/>0x4A,<sp/>0xF7,<sp/>0x35,<sp/>0xA4,<sp/>0x38,<sp/>0xD3,<sp/>0x20,<sp/>0x9A,<sp/>0xCD,<sp/>0x48,<sp/>0xC0,<sp/>0x54,<sp/>0x40},</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="438"><highlight class="normal">};</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><ref refid="ll__resolve__list_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1aaaf6f0dd097fe395e6f54b3a860e6e63" kindref="member">debug_ll_privacy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>hash[3];</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*<ref refid="structrpa_1a0599835e6a665f3a726c6d2f870d4361" kindref="member">addr</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*pirk;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*lirk;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;---------------LL<sp/>privacy<sp/>debug---------&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>addr<sp/>=<sp/>rpa_set[0].<ref refid="structrpa_1a0599835e6a665f3a726c6d2f870d4361" kindref="member">addr</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>pirk<sp/>=<sp/>rpa_set[0].<ref refid="structrpa_1ac19cde4255bfa356f2a7ae8339798e2a" kindref="member">peer_irk</ref>;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;RPA<sp/>:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>btctler_bd_addr_to_str((u8<sp/>*)addr));</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;peer<sp/>IRK<sp/>:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info_hexdump((u8<sp/>*)pirk,<sp/>16);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FALSE<sp/>==<sp/><ref refid="ll__resolve__list_8c_1ae8f2dde34376952c7cee67706e303537" kindref="member">ll_resolvable_private_addr_verify</ref>(addr))<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;ll<sp/>resolve<sp/>addr<sp/>format<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;prand<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info_hexdump((u8<sp/>*)addr<sp/>+<sp/>3,<sp/>3);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1aa4cc2bbb7dc456497b2a87553024bef2" kindref="member">irk_enc</ref>(pirk,<sp/>addr<sp/>+<sp/>3,<sp/>hash);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;hash<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info_hexdump(hash,<sp/>3);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//localHash<sp/>match<sp/>peer<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memcmp(hash,<sp/>(u8<sp/>*)addr,<sp/>3))<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;ll<sp/>peer<sp/>private<sp/>addr<sp/>resolved!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/><ref refid="structrpa" kindref="compound">rpa</ref>[6];</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>lirk<sp/>=<sp/>rpa_set[0].<ref refid="structrpa_1a8216ae6387c768a89a928ae84c85d7d9" kindref="member">local_irk</ref>;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;local<sp/>IRK<sp/>:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info_hexdump((u8<sp/>*)lirk,<sp/>16);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1a10bd407ca223e2ada6cfac7e33721d19" kindref="member">device_addr_generate</ref>(rpa,<sp/>(u8<sp/>*)lirk,<sp/><ref refid="link__layer_8h_1a05589fbab0657f08285ebdfe93f5ec9ea69f78ff96db4e0030c159a26c854d522" kindref="member">RESOLVABLE_PRIVATE_ADDR</ref>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;RPA<sp/>:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>btctler_bd_addr_to_str(rpa));</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;prand<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info_hexdump(rpa<sp/>+<sp/>3,<sp/>3);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1aa4cc2bbb7dc456497b2a87553024bef2" kindref="member">irk_enc</ref>(lirk,<sp/>rpa<sp/>+<sp/>3,<sp/>hash);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;hash<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info_hexdump(hash,<sp/>3);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//localHash<sp/>match<sp/>peer<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memcmp(hash,<sp/>rpa,<sp/>3))<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;ll<sp/>local<sp/>private<sp/>addr<sp/>resolved!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;---------------LL<sp/>privacy<sp/>debug<sp/>end---------&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ll__resolve__list_8c_1aab0e7b5191af9f0feddc4722e643d558" kindref="member">ll_vendor_device_address_generate</ref>(u8<sp/>*addr,<sp/>u8<sp/>*irk,<sp/>u8<sp/>type)</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>random48[6];</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>i;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>random48[i++]<sp/>=<sp/>JL_RAND-&gt;R64L;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>random48[i++]<sp/>=<sp/>JL_RAND-&gt;R64H;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>two<sp/>most<sp/>significant<sp/>bits<sp/>of<sp/>the<sp/>address<sp/>shall<sp/>be<sp/>equal<sp/>to<sp/>1<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight><highlight class="comment">//STATIC_DEVICE_ADDR:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>device<sp/>may<sp/>choose<sp/>to<sp/>initialize<sp/>its<sp/>static<sp/>address<sp/>to<sp/>a<sp/>new<sp/>value<sp/>after<sp/>each<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>power<sp/>cycle.<sp/>A<sp/>device<sp/>shall<sp/>not<sp/>change<sp/>its<sp/>static<sp/>address<sp/>value<sp/>once<sp/>initialized<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>until<sp/>the<sp/>device<sp/>is<sp/>power<sp/>cycled.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>random48[5]<sp/>|=<sp/>0xc0;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(addr,<sp/>random48,<sp/>6);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>two<sp/>most<sp/>significant<sp/>bits<sp/>of<sp/>the<sp/>address<sp/>shall<sp/>be<sp/>equal<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>address<sp/>shall<sp/>not<sp/>be<sp/>equal<sp/>to<sp/>the<sp/>public<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight><highlight class="comment">//NON_RESOLVABLE_PRIVATE_ADDR:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>random48[5]<sp/>&amp;=<sp/>~0xc0;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(addr,<sp/>random48,<sp/>6);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>two<sp/>most<sp/>significant<sp/>bits<sp/>of<sp/>rand<sp/>shall<sp/>be<sp/>equal<sp/>to<sp/>0<sp/>and<sp/>1<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight><highlight class="comment">//RESOLVABLE_PRIVATE_ADDR:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hash<sp/>=<sp/>ah(irk,<sp/>ple_privacy.random48);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//LSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>random48[2]<sp/>&amp;=<sp/>~0xc0;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>random48[2]<sp/>|=<sp/>0x40;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1aa4cc2bbb7dc456497b2a87553024bef2" kindref="member">irk_enc</ref>(irk,<sp/>random48,<sp/>addr);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//MSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(addr<sp/>+<sp/>3,<sp/>random48,<sp/>3);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>memcpy(addr,<sp/>hash,<sp/>3);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/ll_resolve_list.c"/>
  </compounddef>
</doxygen>
