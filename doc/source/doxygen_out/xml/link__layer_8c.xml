<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="link__layer_8c" kind="file" language="C++">
    <compoundname>link_layer.c</compoundname>
    <includes local="yes">sfr.h</includes>
    <includes local="yes">memory/malloc.h</includes>
    <includes refid="link__layer_8h" local="yes">ble/link_layer.h</includes>
    <includes local="yes">stdarg.h</includes>
    <includes refid="h4__transport_8h" local="yes">h4_transport.h</includes>
    <includes local="yes">RF_ble.h</includes>
    <includes local="yes">btcontroller_util.h</includes>
    <includes local="yes">btcontroller_heap.h</includes>
    <includes local="yes">tomcrypt.h</includes>
    <includes local="yes">power_interface.h</includes>
    <includes local="yes">hci_controller.h</includes>
    <includes local="yes">common/thread.h</includes>
    <includes local="yes">common/task_config.h</includes>
    <includes local="yes">printf/vsprintf.h</includes>
    <includes local="yes">misc_interface.h</includes>
    <includes local="yes">uart_interface.h</includes>
    <includes local="yes">os/os_api.h</includes>
    <includes local="yes">system/includes.h</includes>
    <includes local="yes">common/debug.h</includes>
    <incdepgraph>
      <node id="2972">
        <label>stdarg.h</label>
      </node>
      <node id="2957">
        <label>os/os_type.h</label>
      </node>
      <node id="2953">
        <label>common/atomic.h</label>
      </node>
      <node id="2967">
        <label>common/lbuf.h</label>
      </node>
      <node id="2950">
        <label>common/list.h</label>
      </node>
      <node id="2956">
        <label>common/thread.h</label>
      </node>
      <node id="2945">
        <label>/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c</label>
        <link refid="link_layer.c"/>
        <childnode refid="2946" relation="include">
        </childnode>
        <childnode refid="2947" relation="include">
        </childnode>
        <childnode refid="2948" relation="include">
        </childnode>
        <childnode refid="2972" relation="include">
        </childnode>
        <childnode refid="2973" relation="include">
        </childnode>
        <childnode refid="2974" relation="include">
        </childnode>
        <childnode refid="2975" relation="include">
        </childnode>
        <childnode refid="2976" relation="include">
        </childnode>
        <childnode refid="2977" relation="include">
        </childnode>
        <childnode refid="2978" relation="include">
        </childnode>
        <childnode refid="2979" relation="include">
        </childnode>
        <childnode refid="2956" relation="include">
        </childnode>
        <childnode refid="2980" relation="include">
        </childnode>
        <childnode refid="2981" relation="include">
        </childnode>
        <childnode refid="2982" relation="include">
        </childnode>
        <childnode refid="2983" relation="include">
        </childnode>
        <childnode refid="2984" relation="include">
        </childnode>
        <childnode refid="2985" relation="include">
        </childnode>
        <childnode refid="2986" relation="include">
        </childnode>
      </node>
      <node id="2947">
        <label>memory/malloc.h</label>
      </node>
      <node id="2959">
        <label>ble/ll_adv.h</label>
        <link refid="ll__adv_8h"/>
        <childnode refid="2951" relation="include">
        </childnode>
      </node>
      <node id="2946">
        <label>sfr.h</label>
      </node>
      <node id="2973">
        <label>h4_transport.h</label>
        <link refid="h4__transport_8h"/>
        <childnode refid="2949" relation="include">
        </childnode>
      </node>
      <node id="2986">
        <label>common/debug.h</label>
      </node>
      <node id="2975">
        <label>btcontroller_util.h</label>
      </node>
      <node id="2961">
        <label>ble/ll_init.h</label>
        <link refid="ll__init_8h"/>
        <childnode refid="2951" relation="include">
        </childnode>
      </node>
      <node id="2963">
        <label>data_extension.h</label>
        <link refid="data__extension_8h"/>
        <childnode refid="2949" relation="include">
        </childnode>
      </node>
      <node id="2966">
        <label>ble/ll_iso.h</label>
        <link refid="ll__iso_8h"/>
        <childnode refid="2954" relation="include">
        </childnode>
        <childnode refid="2967" relation="include">
        </childnode>
        <childnode refid="2956" relation="include">
        </childnode>
      </node>
      <node id="2978">
        <label>power_interface.h</label>
      </node>
      <node id="2974">
        <label>RF_ble.h</label>
      </node>
      <node id="2983">
        <label>uart_interface.h</label>
      </node>
      <node id="2949">
        <label>typedef.h</label>
      </node>
      <node id="2976">
        <label>btcontroller_heap.h</label>
      </node>
      <node id="2955">
        <label>white_list.h</label>
        <link refid="white__list_8h"/>
        <childnode refid="2949" relation="include">
        </childnode>
      </node>
      <node id="2984">
        <label>os/os_api.h</label>
      </node>
      <node id="2969">
        <label>audio_codec.h</label>
        <link refid="audio__codec_8h"/>
        <childnode refid="2954" relation="include">
        </childnode>
      </node>
      <node id="2985">
        <label>system/includes.h</label>
      </node>
      <node id="2960">
        <label>ble/ll_scan.h</label>
        <link refid="ll__scan_8h"/>
        <childnode refid="2951" relation="include">
        </childnode>
      </node>
      <node id="2958">
        <label>ble/llcp.h</label>
        <link refid="llcp_8h"/>
        <childnode refid="2949" relation="include">
        </childnode>
        <childnode refid="2954" relation="include">
        </childnode>
      </node>
      <node id="2964">
        <label>multiple_phys.h</label>
        <link refid="multiple__phys_8h"/>
        <childnode refid="2949" relation="include">
        </childnode>
      </node>
      <node id="2962">
        <label>resolve_list.h</label>
        <link refid="resolve__list_8h"/>
        <childnode refid="2949" relation="include">
        </childnode>
      </node>
      <node id="2951">
        <label>ble_interface.h</label>
      </node>
      <node id="2977">
        <label>tomcrypt.h</label>
      </node>
      <node id="2965">
        <label>ble/ll_cte.h</label>
        <link refid="ll__cte_8h"/>
        <childnode refid="2954" relation="include">
        </childnode>
      </node>
      <node id="2979">
        <label>hci_controller.h</label>
      </node>
      <node id="2952">
        <label>common/sys_timer.h</label>
      </node>
      <node id="2981">
        <label>printf/vsprintf.h</label>
      </node>
      <node id="2948">
        <label>ble/link_layer.h</label>
        <link refid="link__layer_8h"/>
        <childnode refid="2949" relation="include">
        </childnode>
        <childnode refid="2950" relation="include">
        </childnode>
        <childnode refid="2951" relation="include">
        </childnode>
        <childnode refid="2952" relation="include">
        </childnode>
        <childnode refid="2953" relation="include">
        </childnode>
        <childnode refid="2954" relation="include">
        </childnode>
        <childnode refid="2955" relation="include">
        </childnode>
        <childnode refid="2956" relation="include">
        </childnode>
        <childnode refid="2957" relation="include">
        </childnode>
        <childnode refid="2958" relation="include">
        </childnode>
        <childnode refid="2959" relation="include">
        </childnode>
        <childnode refid="2960" relation="include">
        </childnode>
        <childnode refid="2961" relation="include">
        </childnode>
        <childnode refid="2962" relation="include">
        </childnode>
        <childnode refid="2963" relation="include">
        </childnode>
        <childnode refid="2964" relation="include">
        </childnode>
        <childnode refid="2965" relation="include">
        </childnode>
        <childnode refid="2966" relation="include">
        </childnode>
        <childnode refid="2968" relation="include">
        </childnode>
        <childnode refid="2970" relation="include">
        </childnode>
        <childnode refid="2971" relation="include">
        </childnode>
      </node>
      <node id="2954">
        <label>ll_defines.h</label>
        <link refid="ll__defines_8h"/>
        <childnode refid="2949" relation="include">
        </childnode>
      </node>
      <node id="2970">
        <label>ble/ll_cis.h</label>
        <link refid="ll__cis_8h"/>
        <childnode refid="2966" relation="include">
        </childnode>
        <childnode refid="2948" relation="include">
        </childnode>
      </node>
      <node id="2968">
        <label>ble/ll_bis.h</label>
        <link refid="ll__bis_8h"/>
        <childnode refid="2966" relation="include">
        </childnode>
        <childnode refid="2969" relation="include">
        </childnode>
      </node>
      <node id="2971">
        <label>ble/ll_pc.h</label>
        <link refid="ll__pc_8h"/>
        <childnode refid="2954" relation="include">
        </childnode>
      </node>
      <node id="2980">
        <label>common/task_config.h</label>
      </node>
      <node id="2982">
        <label>misc_interface.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structoneshot" prot="public">oneshot</innerclass>
    <innerclass refid="structle__event" prot="public">le_event</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="link__layer_8c_1a6c6991cba0e2995d7d9aec73e0324317" prot="public" static="no">
        <name>LOG_TAG_CONST</name>
        <initializer>LL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="20" column="9" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="link__layer_8c_1a7ce0df38eb467e59f209470c8f5ac4e6" prot="public" static="no">
        <name>LOG_TAG</name>
        <initializer>&quot;[LL]&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="21" column="9" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="link__layer_8c_1a9eeb6e067100d0dec6e53bce19a403e0" prot="public" static="no">
        <name>LOG_ERROR_ENABLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="22" column="9" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="link__layer_8c_1a69321c8a2a0b07a07fb5088e82e25eb0" prot="public" static="no">
        <name>LOG_INFO_ENABLE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="23" column="9" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="link__layer_8c_1a11821d1dd74b0eec8a3450c251d55987" prot="public" static="no">
        <name>hci_transport</name>
        <initializer><ref refid="ll__common__iso_8c_1a379b1e8deb165c388b8e4c16c79f9d5e" kindref="member">h4_transport</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="41" column="9" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="link__layer_8c_1aadb1c152d5ce09030e3e52745b7b16d6" prot="public" static="no">
        <name>SIGNAL_DEBUG_TIMEOUT</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <briefdescription>
<para>Low Power Debug Signal(mapping to DSview) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="45" column="9" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" prot="public" static="no">
        <name>AT_BLE_LL_CODE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="48" column="9" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="link__layer_8c_1a361c94a6cd562283f1c8405c31cec997" prot="public" static="no">
        <name>AT_BLE_LL_PROBE_CODE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="49" column="9" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" prot="public" static="no">
        <name>__this</name>
        <initializer>(&amp;<ref refid="link__layer_8h_1a11d5b1c8b0def0c238d4700650780724" kindref="member">ll_hdl</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="85" column="9" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="link__layer_8c_1a379b1e8deb165c388b8e4c16c79f9d5e" prot="public" static="no" mutable="no">
        <type>const hci_transport_t *</type>
        <definition>const hci_transport_t* h4_transport</definition>
        <argsstring></argsstring>
        <name>h4_transport</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="39" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="link__layer_8c_1afed32d02528f4adb6c445311f265f0e9" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structle__event" kindref="compound">le_event</ref></type>
        <definition>struct tws_search_info _GNU_PACKED_</definition>
        <argsstring></argsstring>
        <name>_GNU_PACKED_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="61" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="link__layer_8c_1a2c573303905fa0cedf41096fb1b64eed" prot="public" static="no" mutable="no">
        <type>const u16</type>
        <definition>const u16 sca_ppm_tbl[]</definition>
        <argsstring>[]</argsstring>
        <name>sca_ppm_tbl</name>
        <initializer>= {
    500,    
    250,    
    150,    
    100,    
    75,     
    50,     
    30,     
    20      
}</initializer>
        <briefdescription>
<para>SCA PPM table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="66" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="link__layer_8c_1a1963ee487fe0768da940f7ec544d69b4" prot="public" static="no" mutable="no">
        <type>u8</type>
        <definition>u8 ll_error_code</definition>
        <argsstring></argsstring>
        <name>ll_error_code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="76" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="link__layer_8c_1a11d5b1c8b0def0c238d4700650780724" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structlink__layer__handle" kindref="compound">link_layer_handle</ref></type>
        <definition>struct link_layer_handle ll_hdl</definition>
        <argsstring></argsstring>
        <name>ll_hdl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="76" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="link__layer_8c_1af2aa940e2aa5d8ba01063e5f4e6f44e1" prot="public" static="yes" mutable="no">
        <type>u8</type>
        <definition>u8 pEvent_buf_static[CONTROLLER_MAX_LE_EVENT_PAYLOAD]</definition>
        <argsstring>[CONTROLLER_MAX_LE_EVENT_PAYLOAD]</argsstring>
        <name>pEvent_buf_static</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="87" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="link__layer_8c_1a6acb3ca6c474d2b4d1ec01ec741812cc" prot="public" static="no" mutable="no">
        <type>const struct ble_handler</type>
        <definition>const struct ble_handler conn_handler</definition>
        <argsstring></argsstring>
        <name>conn_handler</name>
        <initializer>= {
    .rx_probe_handler       = <ref refid="link__layer_8c_1adff7ebbc5d9f74b20f660d347c652ed1" kindref="member">conn_rx_probe_handler</ref>,
    .tx_probe_handler       = <ref refid="link__layer_8c_1af5f313d803ff38464dc8d83a6133e6fa" kindref="member">conn_tx_probe_handler</ref>,
    .event_probe_handler    = <ref refid="link__layer_8c_1ab56c4771d56c7d7203a6cc2320eeb59f" kindref="member">conn_evt_probe_handler</ref>,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1461" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="link__layer_8c_1a6c1bee17cae2c6493a7048cfc0955160" prot="public" static="no" mutable="no">
        <type>const struct ble_conn_param</type>
        <definition>const struct ble_conn_param sample_conn_param</definition>
        <argsstring></argsstring>
        <name>sample_conn_param</name>
        <initializer>= {
    .aa         = {0x8e, 0x89, 0xbe, 0xd6},
    .crcinit    = {0xae, 0x83, 0x19},
    .winsize    = 0x2,
    .winoffset  = 0x0000,
    .interval   = 0x0027,
    .latency    = 0x0000,
    .timeout    = 0x0032,
    .channel    = {0xff, 0xff, 0xff, 0xff, 0x1f},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1765" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="link__layer_8c_1a56db5141b814e98cc06755e0deefb7a8" prot="public" static="no" mutable="no">
        <type>u8</type>
        <definition>u8 verify[]</definition>
        <argsstring>[]</argsstring>
        <name>verify</name>
        <initializer>= {0x3B, 0x9A, 0x63, 0xFD}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1925" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1925" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="link__layer_8c_1ac0e5071b1cc989a1341bde4f4f76752c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static AT_BLE_LL_PROBE_CODE void ll_supervision_timeout_stop</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_supervision_timeout_stop</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="91" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="978" bodyend="984"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ae325f6e7122c8e14643f126bae293fe2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_response_timeout_stop</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_response_timeout_stop</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="92" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1159" bodyend="1165"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ad9b168ce8f8a8e086c7001874383f0d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void __master_ll_conn_update_callback</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>__master_ll_conn_update_callback</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a21c6af55e651900bc013e3f681272217" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void __master_ll_send_channel_map_callback</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>__master_ll_send_channel_map_callback</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a57d3734a85937461967ed9b2fb0fdcc0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ll_sent_acl_packet_destroy</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_sent_acl_packet_destroy</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="95" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="886" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a068dc0543bf10048c98f26e8277a0438" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ll_master_set_connection_param</definition>
        <argsstring>(struct ble_conn_param *param)</argsstring>
        <name>ll_master_set_connection_param</name>
        <param>
          <type>struct ble_conn_param *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a6665ff63058f613583d0c7235abc45a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static AT_BLE_LL_PROBE_CODE void ll_slave_set_connection_param</definition>
        <argsstring>(struct ble_conn_param *param, u8 *data)</argsstring>
        <name>ll_slave_set_connection_param</name>
        <param>
          <type>struct ble_conn_param *</type>
          <declname>param</declname>
        </param>
        <param>
          <type>u8 *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="97" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="2102" bodyend="2125"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a3b3e9d32aa6da2fab7cb9bc9f688bea0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>static uint16_t bb_get_clock_accuracy</definition>
        <argsstring>(void)</argsstring>
        <name>bb_get_clock_accuracy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="102" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1afb48ffadc625224bb661a47c54f44ff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t ll_calc_clock_accuracy</definition>
        <argsstring>(uint8_t mstScaIdx)</argsstring>
        <name>ll_calc_clock_accuracy</name>
        <param>
          <type>uint8_t</type>
          <declname>mstScaIdx</declname>
        </param>
        <briefdescription>
<para>Compute the total clock accuracy. </para>        </briefdescription>
        <detaileddescription>
<para>Sleep Clock Accuracy.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mstScaIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>Master sleep clock accuracy index.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Combined sleep clock inaccuracy. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="116" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="116" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a655775fcdfb01868c5efd6e981962a6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t ll_get_conn_sca</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_get_conn_sca</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>: Compute the sleep clock accuracy index in connection link.</para><para>: link</para><para>: SCA index. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="137" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="137" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1aecd9bcae38d69be06b11edb199f91454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t ll_get_sca</definition>
        <argsstring>(void)</argsstring>
        <name>ll_get_sca</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>: Compute the master sleep clock accuracy index.</para><para>: SCA index. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="172" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="172" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a3d0eda22b2af89e20872c44012dd3de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> void</type>
        <definition>AT_BLE_LL_CODE void __event_oneshot_add</definition>
        <argsstring>(struct le_link *link, void(*func)(struct le_link *), int instant)</argsstring>
        <name>__event_oneshot_add</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <param>
          <type>void(*)(struct <ref refid="structle__link" kindref="compound">le_link</ref> *)</type>
          <declname>func</declname>
        </param>
        <param>
          <type>int</type>
          <declname>instant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="203" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="203" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1aa6805e344f717f14f35bc3c8c7e46596" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref> void</type>
        <definition>static AT_BLE_LL_PROBE_CODE void __event_oneshot_run</definition>
        <argsstring>(struct le_link *link, int event_cnt)</argsstring>
        <name>__event_oneshot_run</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <param>
          <type>int</type>
          <declname>event_cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="218" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="218" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ab92582f1050526cdec9c739a32358a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> void</type>
        <definition>AT_BLE_LL_CODE void __event_oneshot_remove</definition>
        <argsstring>(struct le_link *link, void(*func)(struct le_link *), int instant)</argsstring>
        <name>__event_oneshot_remove</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <param>
          <type>void(*)(struct <ref refid="structle__link" kindref="compound">le_link</ref> *)</type>
          <declname>func</declname>
        </param>
        <param>
          <type>int</type>
          <declname>instant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="242" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="242" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a66760bbdd0e3644514b700113f206396" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void __event_oneshot_destroy</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>__event_oneshot_destroy</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="259" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="259" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a9345e7dd477b91bf5c71013f23bd008f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref> void</type>
        <definition>AT_BLE_LL_PROBE_CODE void __rx_oneshot_add</definition>
        <argsstring>(struct le_link *link, void(*func)(struct le_link *))</argsstring>
        <name>__rx_oneshot_add</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <param>
          <type>void(*)(struct <ref refid="structle__link" kindref="compound">le_link</ref> *)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="272" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="272" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1aee76af51844a6001f3fd0adef4d81747" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> void</type>
        <definition>static AT_BLE_LL_CODE void __rx_oneshot_run</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>__rx_oneshot_run</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="285" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="285" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1aa79e0d8a84827ad8faf73db8d88c5105" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void __rx_oneshot_destroy</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>__rx_oneshot_destroy</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="296" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="296" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a3db8a1fb4120c21fb588dc9dffc1a4b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> void</type>
        <definition>AT_BLE_LL_CODE void __event_oneshot_post_add</definition>
        <argsstring>(struct le_link *link, void(*func)(struct le_link *), int instant)</argsstring>
        <name>__event_oneshot_post_add</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <param>
          <type>void(*)(struct <ref refid="structle__link" kindref="compound">le_link</ref> *)</type>
          <declname>func</declname>
        </param>
        <param>
          <type>int</type>
          <declname>instant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="308" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="308" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1adc37fd02d4c2279b94b9ea211355dc46" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref> bool</type>
        <definition>static AT_BLE_LL_PROBE_CODE bool __event_oneshot_post_query</definition>
        <argsstring>(struct le_link *link, int event_cnt)</argsstring>
        <name>__event_oneshot_post_query</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <param>
          <type>int</type>
          <declname>event_cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="323" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="323" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a102aa95dcc3de53747dafba253d5e2c9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref> void</type>
        <definition>static AT_BLE_LL_PROBE_CODE void __event_oneshot_post_run</definition>
        <argsstring>(struct le_link *link, int event_cnt)</argsstring>
        <name>__event_oneshot_post_run</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <param>
          <type>int</type>
          <declname>event_cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="343" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="343" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ad41ff702f5538e858361fe2e76c36059" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> void</type>
        <definition>static AT_BLE_LL_CODE void __event_oneshot_post_remove</definition>
        <argsstring>(struct le_link *link, void(*func)(struct le_link *), int instant)</argsstring>
        <name>__event_oneshot_post_remove</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <param>
          <type>void(*)(struct <ref refid="structle__link" kindref="compound">le_link</ref> *)</type>
          <declname>func</declname>
        </param>
        <param>
          <type>int</type>
          <declname>instant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="363" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="363" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a7963e2151a1d547f706b2a6f19071bfc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void __event_oneshot_post_destroy</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>__event_oneshot_post_destroy</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="380" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="380" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1abc9c6a4674cfd61fdb06391757963092" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> struct <ref refid="structle__event" kindref="compound">le_event</ref> *</type>
        <definition>static AT_BLE_LL_CODE struct le_event* __alloc_event</definition>
        <argsstring>(int len, const char *format, va_list argptr)</argsstring>
        <name>__alloc_event</name>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>argptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="400" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="400" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ae47fdd4777580658df3138aeb05507eb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> bool</type>
        <definition>static AT_BLE_LL_CODE bool meta_event_mask</definition>
        <argsstring>(int subevent_code)</argsstring>
        <name>meta_event_mask</name>
        <param>
          <type>int</type>
          <declname>subevent_code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="416" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="416" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a4e5a29b6bb078f3eda716888d15412a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> bool</type>
        <definition>AT_BLE_LL_CODE bool __hci_emit_le_meta_event</definition>
        <argsstring>(u8 subevent_code, const char *format,...)</argsstring>
        <name>__hci_emit_le_meta_event</name>
        <param>
          <type>u8</type>
          <declname>subevent_code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="430" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="430" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a42594a7a51e289fd061d0a7ba63fcb46" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> int</type>
        <definition>static AT_BLE_LL_CODE int le_meta_event_upload</definition>
        <argsstring>()</argsstring>
        <name>le_meta_event_upload</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="466" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="466" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1abc4e9f5d633715feaca1a405e2b855ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
        <definition>AT_BLE_LL_CODE struct le_link* ll_link_for_address</definition>
        <argsstring>(u8 addr_type, const u8 *addr)</argsstring>
        <name>ll_link_for_address</name>
        <param>
          <type>u8</type>
          <declname>addr_type</declname>
        </param>
        <param>
          <type>const u8 *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="493" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="493" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a1809d336252af947726fd5e404fdf0c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
        <definition>AT_BLE_LL_CODE struct le_link* ll_link_for_state</definition>
        <argsstring>(u8 state)</argsstring>
        <name>ll_link_for_state</name>
        <param>
          <type>u8</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="513" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="513" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ad0cf3cf97fdaf769c891098d100efedc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
        <definition>AT_BLE_LL_CODE struct le_link* ll_link_for_handle</definition>
        <argsstring>(int handle)</argsstring>
        <name>ll_link_for_handle</name>
        <param>
          <type>int</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="533" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="533" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1af4ce716efbd2f5c457a9827d58ccc0e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
        <definition>AT_BLE_LL_CODE struct le_link* get_ll_link_from_cur_number</definition>
        <argsstring>(void)</argsstring>
        <name>get_ll_link_from_cur_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="553" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="553" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a217df2024361d6474d56b61aaa11cf47" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> void</type>
        <definition>static AT_BLE_LL_CODE void free_link_handle</definition>
        <argsstring>(u16 handle)</argsstring>
        <name>free_link_handle</name>
        <param>
          <type>u16</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="559" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="559" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a0338806fdff047d16e9da9911f8070f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> u16</type>
        <definition>AT_BLE_LL_CODE u16 get_ble_link_handle</definition>
        <argsstring>(void)</argsstring>
        <name>get_ble_link_handle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="568" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="568" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a6e5baec9e508d5b2ffb401d84be3ad1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> u16</type>
        <definition>AT_BLE_LL_CODE u16 alloc_link_handle</definition>
        <argsstring>(void)</argsstring>
        <name>alloc_link_handle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="574" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="574" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ac6a987f10797d3dcd080f25b9c6f038f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u8</type>
        <definition>u8 hop_generarate</definition>
        <argsstring>(void)</argsstring>
        <name>hop_generarate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="589" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="589" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a500af8812cc7e935661ef18be52a97d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
        <definition>struct le_link* ll_create_conn_link</definition>
        <argsstring>(void *hw, struct le_addr *local_addr, u8 role, u8 peer_addr_type, u8 peer_addr[6], void *ll_data)</argsstring>
        <name>ll_create_conn_link</name>
        <param>
          <type>void *</type>
          <declname>hw</declname>
        </param>
        <param>
          <type>struct le_addr *</type>
          <declname>local_addr</declname>
        </param>
        <param>
          <type>u8</type>
          <declname>role</declname>
        </param>
        <param>
          <type>u8</type>
          <declname>peer_addr_type</declname>
        </param>
        <param>
          <type>u8</type>
          <declname>peer_addr</declname>
          <array>[6]</array>
        </param>
        <param>
          <type>void *</type>
          <declname>ll_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="599" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="599" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a076ebfdffad3a441785c9ab717d26551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_create_conn_link_post</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_create_conn_link_post</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="654" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="654" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a95a914a1e7d9133f5fb1d9108937a881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> void</type>
        <definition>AT_BLE_LL_CODE void ll_close_conn_link</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_close_conn_link</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="679" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="679" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a33c1e91118feac64f1143195e30be576" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_delete_link</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_delete_link</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="717" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="717" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a8c46755c6f40e08f19ca426a8f7bc360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_send_control_data</definition>
        <argsstring>(struct le_link *link, int opcode, const char *format,...)</argsstring>
        <name>ll_send_control_data</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <param>
          <type>int</type>
          <declname>opcode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="741" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="741" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1acd6f8fd33bf171094abb9ba83c2a4fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_send_control_data_callback</definition>
        <argsstring>(struct le_link *link, void(*callback)(void *), int opcode, const char *format,...)</argsstring>
        <name>ll_send_control_data_callback</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>int</type>
          <declname>opcode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="762" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="762" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a72b2e5a166b1d7637bc1571dc1da7be1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> void</type>
        <definition>AT_BLE_LL_CODE void ll_send_acl_packet</definition>
        <argsstring>(int handle, const u8 *packet, int acl_fragmentation_total_size)</argsstring>
        <name>ll_send_acl_packet</name>
        <param>
          <type>int</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const u8 *</type>
          <declname>packet</declname>
        </param>
        <param>
          <type>int</type>
          <declname>acl_fragmentation_total_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="790" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="790" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1aa5d0868ff3a3bbcc494d91ee7e589639" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> u8</type>
        <definition>static AT_BLE_LL_CODE u8 ll_sent_acl_packet</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_sent_acl_packet</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="868" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="868" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a72e6771a003fef9da29111e0d4c7974e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> bool</type>
        <definition>AT_BLE_LL_CODE bool device_addr_verify</definition>
        <argsstring>(const u8 *addr, u8 start, u8 len)</argsstring>
        <name>device_addr_verify</name>
        <param>
          <type>const u8 *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>u8</type>
          <declname>start</declname>
        </param>
        <param>
          <type>u8</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="901" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="901" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a7c9351015b74e57dfff1316dbf235a9e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> bool</type>
        <definition>static AT_BLE_LL_CODE bool __ll_random_device_addr_verify</definition>
        <argsstring>(const u8 *addr)</argsstring>
        <name>__ll_random_device_addr_verify</name>
        <param>
          <type>const u8 *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="942" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="942" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ad0aaeb5ff2f2714f9a6e8a80fec36515" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_disconnect_process</definition>
        <argsstring>(struct le_link *link, u8 reason)</argsstring>
        <name>ll_disconnect_process</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <param>
          <type>u8</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="952" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="952" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a19ed6a89fc0ead9855b405690d215d41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_conn_fast_supervision_timer_handler</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_conn_fast_supervision_timer_handler</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="972" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="972" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1aeb97f23eb3cf24bbfd376d67e73b413f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref> void</type>
        <definition>static AT_BLE_LL_PROBE_CODE void ll_conn_supervision_timer_handler</definition>
        <argsstring>(void *priv)</argsstring>
        <name>ll_conn_supervision_timer_handler</name>
        <param>
          <type>void *</type>
          <declname>priv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="987" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="987" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1aa9eb9f1e5abe4f9a25af82c730b9d308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref> void</type>
        <definition>AT_BLE_LL_PROBE_CODE void ll_supervision_timeout_start</definition>
        <argsstring>(struct le_link *link, u32 timeout)</argsstring>
        <name>ll_supervision_timeout_start</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Supervision Timout. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1014" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1014" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1aa519abe78aba7f3ce911e32a6aa97507" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ll_supervision_timeout_reset</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_supervision_timeout_reset</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1024" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1024" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a5c15284e0ac852b39f699cd8b4f49127" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_supervision_timeout_changeperiod</definition>
        <argsstring>(struct le_link *link, u32 timeout)</argsstring>
        <name>ll_supervision_timeout_changeperiod</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1031" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1031" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a5022824bdb10dd91b935cf5b7698d3f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref> void</type>
        <definition>AT_BLE_LL_PROBE_CODE void ll_set_conn_winsize</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_set_conn_winsize</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1040" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1040" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a4ee1b0a31325b4fb5d17f7dfd325bf15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> bool</type>
        <definition>AT_BLE_LL_CODE bool __instant_link_lost</definition>
        <argsstring>(u16 instant, u16 eventcnt)</argsstring>
        <name>__instant_link_lost</name>
        <param>
          <type>u16</type>
          <declname>instant</declname>
        </param>
        <param>
          <type>u16</type>
          <declname>eventcnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1054" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1054" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a40ded10d498adb7d518e5a0e15016532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> void</type>
        <definition>AT_BLE_LL_CODE void ll_debug_info</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_debug_info</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1078" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1078" bodyend="1099"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ae7b0aca03048f3626e0e4833835b0fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> void</type>
        <definition>AT_BLE_LL_CODE void conn_rx_acl_u_post_handler</definition>
        <argsstring>(struct le_link *link, struct ble_rx *rx)</argsstring>
        <name>conn_rx_acl_u_post_handler</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <param>
          <type>struct ble_rx *</type>
          <declname>rx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1103" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1103" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1acff02d394ee1e464b7195fddbaa2595f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> void</type>
        <definition>static AT_BLE_LL_CODE void ll_response_timeout_handler</definition>
        <argsstring>(void *priv)</argsstring>
        <name>ll_response_timeout_handler</name>
        <param>
          <type>void *</type>
          <declname>priv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1139" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1139" bodyend="1157"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a040835a9a5dcc53faf649b31aa7991a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_response_timeout_start</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_response_timeout_start</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Response Timout. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1168" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1168" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a74c679b118624612c9a59a2ac67d94f0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ll_response_timeout_reset</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_response_timeout_reset</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1183" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1183" bodyend="1186"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a1c224d59c1d1af62cff64fee6e50745b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ll_auth_timeout_callback</definition>
        <argsstring>(void *priv)</argsstring>
        <name>ll_auth_timeout_callback</name>
        <param>
          <type>void *</type>
          <declname>priv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>: ll_auth_timeout_callback</para><para>: priv </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1195" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1195" bodyend="1209"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a64ed22035ac4901e96855c101b087879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_auth_timeout_stop</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_auth_timeout_stop</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>: ll_auth_timeout_stop</para><para>: link </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1218" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1218" bodyend="1224"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a5053fafb50478124120660c52a8a0173" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_auth_timeout_start</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_auth_timeout_start</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Authentication Timout. </para>        </briefdescription>
        <detaileddescription>
<para>: ll_auth_timeout_start</para><para>: <ref refid="structle__link" kindref="compound">le_link</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1233" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1233" bodyend="1244"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a7c3f59306e63dba2cfa47003cdfc843a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ll_ping_timeout_callback</definition>
        <argsstring>(void *priv)</argsstring>
        <name>ll_ping_timeout_callback</name>
        <param>
          <type>void *</type>
          <declname>priv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>: ll_ping_timeout_callback</para><para>: priv </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1253" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1253" bodyend="1267"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a82ef696123973169710ea7e029be17be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_ping_timeout_stop</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_ping_timeout_stop</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Ping Timout. </para>        </briefdescription>
        <detaileddescription>
<para>: ll_ping_timeout_stop</para><para>: link </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1276" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1276" bodyend="1282"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a5ef4029dea4681c5a19c30c0b7ef71d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_ping_timeout_start</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_ping_timeout_start</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>: ll_ping_timeout_start</para><para>: link </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1291" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1291" bodyend="1303"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a8cb2783a4eef61ae2a6f050194f18fe7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> u8</type>
        <definition>static AT_BLE_LL_CODE u8 ll_vendor_set_latency_hold</definition>
        <argsstring>(u16 *param)</argsstring>
        <name>ll_vendor_set_latency_hold</name>
        <param>
          <type>u16 *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1308" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1308" bodyend="1321"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a022c18655b36b96303b13e0df798933d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> u8</type>
        <definition>AT_BLE_LL_CODE u8 ll_push_control_data</definition>
        <argsstring>(u16 opcode, const u8 *param)</argsstring>
        <name>ll_push_control_data</name>
        <param>
          <type>u16</type>
          <declname>opcode</declname>
        </param>
        <param>
          <type>const u8 *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1325" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1325" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a3e8d169dd992baeb74857e816f4ce105" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ll_rx_post_handler</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_rx_post_handler</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1333" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1333" bodyend="1342"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1aa3779bab47c2c75c690198c778735b0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ll_event_post_handler</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_event_post_handler</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1345" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1345" bodyend="1350"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a51fb04c98eafa0f433326affc9740c48" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> void</type>
        <definition>static AT_BLE_LL_CODE void tx_ctrl_pdu_handler</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>tx_ctrl_pdu_handler</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1354" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1354" bodyend="1359"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a655af57ce4c755d9736c0b172572d6b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> void</type>
        <definition>static AT_BLE_LL_CODE void ll_tx_post_handler</definition>
        <argsstring>(struct le_link *link)</argsstring>
        <name>ll_tx_post_handler</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1363" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1363" bodyend="1387"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1af5e4ac77575bf70aae9293b0c2925f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref> void</type>
        <definition>AT_BLE_LL_PROBE_CODE void ll_thread_resume</definition>
        <argsstring>(void)</argsstring>
        <name>ll_thread_resume</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1391" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1391" bodyend="1394"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1adff7ebbc5d9f74b20f660d347c652ed1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void conn_rx_probe_handler</definition>
        <argsstring>(void *priv, struct ble_rx *rx)</argsstring>
        <name>conn_rx_probe_handler</name>
        <param>
          <type>void *</type>
          <declname>priv</declname>
        </param>
        <param>
          <type>struct ble_rx *</type>
          <declname>rx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1397" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1397" bodyend="1427"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1af5f313d803ff38464dc8d83a6133e6fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void conn_tx_probe_handler</definition>
        <argsstring>(void *priv, struct ble_tx *tx)</argsstring>
        <name>conn_tx_probe_handler</name>
        <param>
          <type>void *</type>
          <declname>priv</declname>
        </param>
        <param>
          <type>struct ble_tx *</type>
          <declname>tx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1429" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1429" bodyend="1448"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a5f6320d52605be6a3a0148af3ebd9ec5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void conn_evt_probe_evtcount_handler</definition>
        <argsstring>(struct le_link *link, int event)</argsstring>
        <name>conn_evt_probe_evtcount_handler</name>
        <param>
          <type>struct <ref refid="structle__link" kindref="compound">le_link</ref> *</type>
          <declname>link</declname>
        </param>
        <param>
          <type>int</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1450" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1450" bodyend="1459"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ab56c4771d56c7d7203a6cc2320eeb59f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void conn_evt_probe_handler</definition>
        <argsstring>(void *priv, int type, int param)</argsstring>
        <name>conn_evt_probe_handler</name>
        <param>
          <type>void *</type>
          <declname>priv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1461" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1461" bodyend="1470"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1abfb0519e23e6362551a226c553d0527f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ll_thread_process</definition>
        <argsstring>(struct thread *th)</argsstring>
        <name>ll_thread_process</name>
        <param>
          <type>struct thread *</type>
          <declname>th</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1478" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1478" bodyend="1570"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a1ed55c677206e7119670198573c60bc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> u8</type>
        <definition>AT_BLE_LL_CODE u8 ll_read_channel_map</definition>
        <argsstring>(u8 *channel_map, const u8 *data)</argsstring>
        <name>ll_read_channel_map</name>
        <param>
          <type>u8 *</type>
          <declname>channel_map</declname>
        </param>
        <param>
          <type>const u8 *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1573" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1573" bodyend="1586"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ac6cbbcbccdc4336b6ebd9abf181d3eab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ll_acl_packet_init</definition>
        <argsstring>(void)</argsstring>
        <name>ll_acl_packet_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1588" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1588" bodyend="1593"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a3fdc7c4f244a8ea1901c7beda1846993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> void</type>
        <definition>AT_BLE_LL_CODE void ll_init</definition>
        <argsstring>(void)</argsstring>
        <name>ll_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1601" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1601" bodyend="1677"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a2a9c0c14ed733611247ef69e783c671b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="link__layer_8h_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref> void</type>
        <definition>AT_BLE_LL_CODE void ll_destroy</definition>
        <argsstring>(void)</argsstring>
        <name>ll_destroy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1682" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1682" bodyend="1736"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ae7477dec64dd05f8e8792bed690900d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_reset</definition>
        <argsstring>(void)</argsstring>
        <name>ll_reset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1738" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1738" bodyend="1743"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1afec91aee56468334375d1391a5a8a484" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __set_ll_local_addr_common</definition>
        <argsstring>(struct le_addr *addr, u8 own_addr_type)</argsstring>
        <name>__set_ll_local_addr_common</name>
        <param>
          <type>struct le_addr *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>u8</type>
          <declname>own_addr_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1745" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1745" bodyend="1763"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1adfe227fcb9e3cd5517eb4074f28168fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __set_ll_local_addr</definition>
        <argsstring>(void *hw, struct le_addr *addr, u8 own_addr_type)</argsstring>
        <name>__set_ll_local_addr</name>
        <param>
          <type>void *</type>
          <declname>hw</declname>
        </param>
        <param>
          <type>struct le_addr *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>u8</type>
          <declname>own_addr_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1765" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1765" bodyend="1773"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a1afd59c7711234a481880a609b1262d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int check_consecutive_zeros</definition>
        <argsstring>(u8 *pbuf, int len)</argsstring>
        <name>check_consecutive_zeros</name>
        <param>
          <type>u8 *</type>
          <declname>pbuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1786" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1786" bodyend="1808"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a809ebd9e3bfbcc5667e509e21567110a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int check_zeros</definition>
        <argsstring>(u8 *pbuf, int len)</argsstring>
        <name>check_zeros</name>
        <param>
          <type>u8 *</type>
          <declname>pbuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1810" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1810" bodyend="1825"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ac9bc7e121d884aad5c7f4fdad4d67599" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int check_consecutive_ones</definition>
        <argsstring>(u8 *pbuf, int len)</argsstring>
        <name>check_consecutive_ones</name>
        <param>
          <type>u8 *</type>
          <declname>pbuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1827" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1827" bodyend="1849"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ac6f8ffeccc795f4fe41a261d75095254" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int check_ones</definition>
        <argsstring>(u8 *pbuf, int len)</argsstring>
        <name>check_ones</name>
        <param>
          <type>u8 *</type>
          <declname>pbuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1851" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1851" bodyend="1866"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ab479a5c824846c9744959103738ce580" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int check_differs</definition>
        <argsstring>(u8 *buf1, const u8 *buf2, int len)</argsstring>
        <name>check_differs</name>
        <param>
          <type>u8 *</type>
          <declname>buf1</declname>
        </param>
        <param>
          <type>const u8 *</type>
          <declname>buf2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1868" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1868" bodyend="1880"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1abfd9689e041b6d63aa6e36dbf60108fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int check_equal</definition>
        <argsstring>(u8 *pbuf, int len)</argsstring>
        <name>check_equal</name>
        <param>
          <type>u8 *</type>
          <declname>pbuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1882" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1882" bodyend="1893"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ab1621b3030576278c502827f434f4623" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int check_transitions_bits</definition>
        <argsstring>(u8 *pbuf, int len)</argsstring>
        <name>check_transitions_bits</name>
        <param>
          <type>u8 *</type>
          <declname>pbuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1895" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1895" bodyend="1915"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1aa7e34c5918c54b69d22be3f33d4b6059" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int check_exist</definition>
        <argsstring>(u8 *pbuf)</argsstring>
        <name>check_exist</name>
        <param>
          <type>u8 *</type>
          <declname>pbuf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1917" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1917" bodyend="1922"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1aa3a9a9bb60da5fb4ae80f1ea789bf137" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void trace_aa</definition>
        <argsstring>(u8 *aa)</argsstring>
        <name>trace_aa</name>
        <param>
          <type>u8 *</type>
          <declname>aa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1927" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1927" bodyend="1930"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a3a2400b844a72da830a66dc84f77b865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void access_addr_generate</definition>
        <argsstring>(u8 *aa)</argsstring>
        <name>access_addr_generate</name>
        <param>
          <type>u8 *</type>
          <declname>aa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1933" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1933" bodyend="1988"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a3d6f3dcc715eb8b6beadbc5df7c3d1a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t lctrComputeAccessAddr</definition>
        <argsstring>(void)</argsstring>
        <name>lctrComputeAccessAddr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Compute new access address. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>New access address value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="1997" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="1997" bodyend="2030"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a5e5b2b2c35ca28499c085ef59f547202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t lctrComputeSeedAccessAddr</definition>
        <argsstring>(void)</argsstring>
        <name>lctrComputeSeedAccessAddr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Compute new seed access address. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>New seed access address value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="2039" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="2039" bodyend="2076"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1a0e790caf4a070feb3ae94131f49aa806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t lctrComputeCrcInit</definition>
        <argsstring>(void)</argsstring>
        <name>lctrComputeCrcInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Compute new CRC init. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>New CRC init value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>&lt; 24 bits </para>        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="2085" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="2085" bodyend="2092"/>
      </memberdef>
      <memberdef kind="function" id="link__layer_8c_1ac6d025066f03a76928ad0b7975c61078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ll_set_rf_debug</definition>
        <argsstring>(u16 debug_index)</argsstring>
        <name>ll_set_rf_debug</name>
        <param>
          <type>u16</type>
          <declname>debug_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" line="2096" column="1" bodyfile="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c" bodystart="2096" bodyend="2099"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;sfr.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;memory/malloc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="link__layer_8h" kindref="compound">ble/link_layer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stdarg.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="h4__transport_8h" kindref="compound">h4_transport.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RF_ble.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;btcontroller_util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;btcontroller_heap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tomcrypt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;power_interface.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hci_controller.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;common/thread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;common/task_config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;printf/vsprintf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;misc_interface.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;uart_interface.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;os/os_api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;system/includes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_TAG_CONST<sp/><sp/><sp/><sp/><sp/>LL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_TAG<sp/><sp/><sp/><sp/><sp/>&quot;[LL]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_ERROR_ENABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INFO_ENABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>LOG_DUMP_ENABLE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;common/debug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SUPPORT_MS_EXTENSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>bss_seg(&quot;.ble_ll_bss&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>data_seg(&quot;.ble_ll_data&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>const_seg(&quot;.ble_ll_const&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>code_seg(&quot;.ble_ll_code&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//&lt;<sp/>external<sp/>file<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hci_transport_t<sp/>*<ref refid="link__layer_8c_1a379b1e8deb165c388b8e4c16c79f9d5e" kindref="member">h4_transport</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>hci_transport<sp/>h4_transport</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor">#define<sp/>SIGNAL_DEBUG_TIMEOUT(x,<sp/>y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//IO_DEBUG_TOGGLE(x,<sp/>y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AT_BLE_LL_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AT_BLE_LL_PROBE_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="structoneshot" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoneshot" kindref="compound">oneshot</ref><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">list_head<sp/>entry;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*priv);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="structoneshot_1a246d3b6525f663fdc35a89bc13c2a66f" kindref="member">data</ref>[0];</highlight></codeline>
<codeline lineno="55"><highlight class="normal">};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="structle__event" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__event" kindref="compound">le_event</ref><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>event;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>len;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/><ref refid="structoneshot_1a246d3b6525f663fdc35a89bc13c2a66f" kindref="member">data</ref>[0];</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}<sp/><ref refid="link__layer_8c_1afed32d02528f4adb6c445311f265f0e9" kindref="member">_GNU_PACKED_</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u16<sp/><ref refid="link__layer_8c_1a2c573303905fa0cedf41096fb1b64eed" kindref="member">sca_ppm_tbl</ref>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>500,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>250,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>150,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>100,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>75,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>50,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>30,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>20<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
<codeline lineno="76"><highlight class="normal">u8<sp/><ref refid="link__layer_8c_1a1963ee487fe0768da940f7ec544d69b4" kindref="member">ll_error_code</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_MALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlink__layer__handle" kindref="compound">link_layer_handle</ref><sp/>*<ref refid="link__layer_8c_1a11d5b1c8b0def0c238d4700650780724" kindref="member">ll_hdl</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__this<sp/><sp/><sp/><sp/><sp/><sp/>(ll_hdl)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlink__layer__handle" kindref="compound">link_layer_handle</ref><sp/>ll_hdl;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__this<sp/><sp/><sp/><sp/><sp/><sp/>(&amp;ll_hdl)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>u8<sp/><ref refid="link__layer_8c_1af2aa940e2aa5d8ba01063e5f4e6f44e1" kindref="member">pEvent_buf_static</ref>[CONTROLLER_MAX_LE_EVENT_PAYLOAD];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ac0e5071b1cc989a1341bde4f4f76752c" kindref="member">ll_supervision_timeout_stop</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ae325f6e7122c8e14643f126bae293fe2" kindref="member">ll_response_timeout_stop</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ad9b168ce8f8a8e086c7001874383f0d0" kindref="member">__master_ll_conn_update_callback</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a21c6af55e651900bc013e3f681272217" kindref="member">__master_ll_send_channel_map_callback</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a57d3734a85937461967ed9b2fb0fdcc0" kindref="member">ll_sent_acl_packet_destroy</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a068dc0543bf10048c98f26e8277a0438" kindref="member">ll_master_set_connection_param</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>ble_conn_param<sp/>*param);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a6665ff63058f613583d0c7235abc45a5" kindref="member">ll_slave_set_connection_param</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>ble_conn_param<sp/>*param,<sp/>u8<sp/>*<ref refid="structoneshot_1a246d3b6525f663fdc35a89bc13c2a66f" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="link__layer_8c_1a3b3e9d32aa6da2fab7cb9bc9f688bea0" kindref="member">bb_get_clock_accuracy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>500;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight></codeline>
<codeline lineno="115"><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">uint16_t<sp/><ref refid="link__layer_8c_1afb48ffadc625224bb661a47c54f44ff8" kindref="member">ll_calc_clock_accuracy</ref>(uint8_t<sp/>mstScaIdx)</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>clkPpm<sp/>=<sp/><ref refid="link__layer_8c_1a3b3e9d32aa6da2fab7cb9bc9f688bea0" kindref="member">bb_get_clock_accuracy</ref>();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mstScaIdx<sp/>&gt;=<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="link__layer_8c_1a2c573303905fa0cedf41096fb1b64eed" kindref="member">sca_ppm_tbl</ref>)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="link__layer_8c_1a2c573303905fa0cedf41096fb1b64eed" kindref="member">sca_ppm_tbl</ref>[0])))<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cap<sp/>to<sp/>highest<sp/>index.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mstScaIdx<sp/>=<sp/><ref refid="ll__defines_8h_1afccd240f973cf154952fb917c9209719a7060018ff2feb376d95f817fad47b186" kindref="member">LL_MCA_20_PPM</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a2c573303905fa0cedf41096fb1b64eed" kindref="member">sca_ppm_tbl</ref>[mstScaIdx]<sp/>+<sp/>clkPpm;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>***************************************************************************/</highlight></codeline>
<codeline lineno="136"><highlight class="comment">/*<sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">uint8_t<sp/><ref refid="link__layer_8c_1a655775fcdfb01868c5efd6e981962a6d" kindref="member">ll_get_conn_sca</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Depen<sp/>on<sp/>local<sp/>clock<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>clkPpm<sp/>=<sp/><ref refid="link__layer_8c_1a3b3e9d32aa6da2fab7cb9bc9f688bea0" kindref="member">bb_get_clock_accuracy</ref>();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/>sca;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clkPpm<sp/>&lt;=<sp/><sp/>20)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sca<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clkPpm<sp/>&lt;=<sp/><sp/>30)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sca<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clkPpm<sp/>&lt;=<sp/><sp/>50)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sca<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clkPpm<sp/>&lt;=<sp/><sp/>75)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sca<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clkPpm<sp/>&lt;=<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sca<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clkPpm<sp/>&lt;=<sp/>150)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sca<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clkPpm<sp/>&lt;=<sp/>250)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sca<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sca<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)(sca<sp/>+<sp/>link-&gt;<ref refid="structle__link_1ae133655e9b63208594750a4ed36960b7" kindref="member">scaMod</ref>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>***************************************************************************/</highlight></codeline>
<codeline lineno="171"><highlight class="comment">/*<sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">uint8_t<sp/><ref refid="link__layer_8c_1aecd9bcae38d69be06b11edb199f91454" kindref="member">ll_get_sca</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>clkPpm<sp/>=<sp/><ref refid="link__layer_8c_1a3b3e9d32aa6da2fab7cb9bc9f688bea0" kindref="member">bb_get_clock_accuracy</ref>();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/>sca;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clkPpm<sp/>&lt;=<sp/><sp/>20)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sca<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clkPpm<sp/>&lt;=<sp/><sp/>30)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sca<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clkPpm<sp/>&lt;=<sp/><sp/>50)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sca<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clkPpm<sp/>&lt;=<sp/><sp/>75)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sca<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clkPpm<sp/>&lt;=<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sca<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clkPpm<sp/>&lt;=<sp/>150)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sca<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clkPpm<sp/>&lt;=<sp/>250)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sca<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sca<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)(sca<sp/>+<sp/><ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1ad85c1e766c5b3e7aad4145d4f5210573" kindref="member">scaMod</ref>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*-------------------LE<sp/>Link<sp/>Memory</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a3d0eda22b2af89e20872c44012dd3de8" kindref="member">__event_oneshot_add</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref>)(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instant)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoneshot" kindref="compound">oneshot</ref><sp/>*p<sp/>=<sp/>__bt_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structoneshot" kindref="compound">oneshot</ref>)<sp/>+<sp/>4);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(p<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref><sp/>=<sp/>(void<sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref>;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structoneshot_1a246d3b6525f663fdc35a89bc13c2a66f" kindref="member">data</ref>[0]<sp/>=<sp/>instant;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add_tail(&amp;p-&gt;<ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>,<sp/>&amp;link-&gt;<ref refid="structle__link_1afce6e4811f1c0343b6017b56dc04d519" kindref="member">event_oneshot_head</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><ref refid="link__layer_8c_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1aa6805e344f717f14f35bc3c8c7e46596" kindref="member">__event_oneshot_run</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>event_cnt)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(link<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoneshot" kindref="compound">oneshot</ref><sp/>*p,<sp/>*n;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;#&apos;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>u16<sp/>gap;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1ab536d4abf9812e1363ff90ae8b96d91a" kindref="member">event_cnt</ref><sp/>=<sp/>event_cnt;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(p,<sp/>n,<sp/>&amp;link-&gt;<ref refid="structle__link_1afce6e4811f1c0343b6017b56dc04d519" kindref="member">event_oneshot_head</ref>,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gap<sp/>=<sp/>p-&gt;<ref refid="structoneshot_1a246d3b6525f663fdc35a89bc13c2a66f" kindref="member">data</ref>[0]<sp/>-<sp/>event_cnt;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;gap<sp/>:<sp/>%d&quot;,<sp/>gap);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//instant<sp/>hit<sp/>&amp;<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((gap<sp/>&gt;=<sp/>32767)<sp/>||<sp/>(gap<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;p-&gt;<ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref>(link);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__bt_free(p);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ab92582f1050526cdec9c739a32358a98" kindref="member">__event_oneshot_remove</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref>)(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instant)</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(link<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoneshot" kindref="compound">oneshot</ref><sp/>*p,<sp/>*n;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;#&apos;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>put_u16hex(event_cnt);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(p,<sp/>n,<sp/>&amp;link-&gt;<ref refid="structle__link_1afce6e4811f1c0343b6017b56dc04d519" kindref="member">event_oneshot_head</ref>,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref><sp/>==<sp/>p-&gt;<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref>)<sp/>&amp;&amp;<sp/>(instant<sp/>==<sp/>p-&gt;<ref refid="structoneshot_1a246d3b6525f663fdc35a89bc13c2a66f" kindref="member">data</ref>[0]))<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;p-&gt;<ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__bt_free(p);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a66760bbdd0e3644514b700113f206396" kindref="member">__event_oneshot_destroy</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoneshot" kindref="compound">oneshot</ref><sp/>*p,<sp/>*n;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;#&apos;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>put_u16hex(event_cnt);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(p,<sp/>n,<sp/>&amp;link-&gt;<ref refid="structle__link_1afce6e4811f1c0343b6017b56dc04d519" kindref="member">event_oneshot_head</ref>,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;p-&gt;<ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__bt_free(p);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><ref refid="link__layer_8c_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a9345e7dd477b91bf5c71013f23bd008f" kindref="member">__rx_oneshot_add</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref>)(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*))</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoneshot" kindref="compound">oneshot</ref><sp/>*p<sp/>=<sp/>__bt_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structoneshot" kindref="compound">oneshot</ref>));</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(p<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref><sp/>=<sp/>(void<sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add_tail(&amp;p-&gt;<ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>,<sp/>&amp;link-&gt;<ref refid="structle__link_1a88fb391038e5fe54238931374d8d7a71" kindref="member">rx_oneshot_head</ref>);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1aee76af51844a6001f3fd0adef4d81747" kindref="member">__rx_oneshot_run</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoneshot" kindref="compound">oneshot</ref><sp/>*p,<sp/>*n;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(p,<sp/>n,<sp/>&amp;link-&gt;<ref refid="structle__link_1a88fb391038e5fe54238931374d8d7a71" kindref="member">rx_oneshot_head</ref>,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;p-&gt;<ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref>(link);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__bt_free(p);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1aa79e0d8a84827ad8faf73db8d88c5105" kindref="member">__rx_oneshot_destroy</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoneshot" kindref="compound">oneshot</ref><sp/>*p,<sp/>*n;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(p,<sp/>n,<sp/>&amp;link-&gt;<ref refid="structle__link_1a88fb391038e5fe54238931374d8d7a71" kindref="member">rx_oneshot_head</ref>,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;p-&gt;<ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__bt_free(p);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a3db8a1fb4120c21fb588dc9dffc1a4b3" kindref="member">__event_oneshot_post_add</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref>)(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instant)</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoneshot" kindref="compound">oneshot</ref><sp/>*p<sp/>=<sp/>__bt_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structoneshot" kindref="compound">oneshot</ref>)<sp/>+<sp/>4);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(p<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref><sp/>=<sp/>(void<sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structoneshot_1a246d3b6525f663fdc35a89bc13c2a66f" kindref="member">data</ref>[0]<sp/>=<sp/>instant;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add_tail(&amp;p-&gt;<ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>,<sp/>&amp;link-&gt;<ref refid="structle__link_1a664ff487ad99834e931a73e512e81e77" kindref="member">event_oneshot_post_head</ref>);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><ref refid="link__layer_8c_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1adc37fd02d4c2279b94b9ea211355dc46" kindref="member">__event_oneshot_post_query</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>event_cnt)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(link<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoneshot" kindref="compound">oneshot</ref><sp/>*p;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>u16<sp/>gap;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;#&apos;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>put_u16hex(event_cnt);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry(p,<sp/>&amp;link-&gt;<ref refid="structle__link_1a664ff487ad99834e931a73e512e81e77" kindref="member">event_oneshot_post_head</ref>,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gap<sp/>=<sp/>p-&gt;<ref refid="structoneshot_1a246d3b6525f663fdc35a89bc13c2a66f" kindref="member">data</ref>[0]<sp/>-<sp/>event_cnt;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;gap<sp/>:<sp/>%d&quot;,<sp/>gap);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((gap<sp/>&gt;=<sp/>32767)<sp/>||<sp/>(gap<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><ref refid="link__layer_8c_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a102aa95dcc3de53747dafba253d5e2c9" kindref="member">__event_oneshot_post_run</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>event_cnt)</highlight></codeline>
<codeline lineno="344"><highlight class="normal">{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(link<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoneshot" kindref="compound">oneshot</ref><sp/>*p,<sp/>*n;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>u16<sp/>gap;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;#&apos;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>put_u16hex(event_cnt);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(p,<sp/>n,<sp/>&amp;link-&gt;<ref refid="structle__link_1a664ff487ad99834e931a73e512e81e77" kindref="member">event_oneshot_post_head</ref>,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gap<sp/>=<sp/>p-&gt;<ref refid="structoneshot_1a246d3b6525f663fdc35a89bc13c2a66f" kindref="member">data</ref>[0]<sp/>-<sp/>event_cnt;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((gap<sp/>&gt;=<sp/>32767)<sp/>||<sp/>(gap<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;p-&gt;<ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref>(link);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__bt_free(p);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ad41ff702f5538e858361fe2e76c36059" kindref="member">__event_oneshot_post_remove</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref>)(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instant)</highlight></codeline>
<codeline lineno="365"><highlight class="normal">{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(link<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoneshot" kindref="compound">oneshot</ref><sp/>*p,<sp/>*n;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;#&apos;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>put_u16hex(event_cnt);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(p,<sp/>n,<sp/>&amp;link-&gt;<ref refid="structle__link_1a664ff487ad99834e931a73e512e81e77" kindref="member">event_oneshot_post_head</ref>,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref><sp/>==<sp/>p-&gt;<ref refid="structoneshot_1a8cfedd4ca3c52522d5d0a03e8b55aae1" kindref="member">func</ref>)<sp/>&amp;&amp;<sp/>(instant<sp/>==<sp/>p-&gt;<ref refid="structoneshot_1a246d3b6525f663fdc35a89bc13c2a66f" kindref="member">data</ref>[0]))<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;p-&gt;<ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__bt_free(p);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a7963e2151a1d547f706b2a6f19071bfc" kindref="member">__event_oneshot_post_destroy</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoneshot" kindref="compound">oneshot</ref><sp/>*p,<sp/>*n;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;#&apos;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>put_u16hex(event_cnt);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(p,<sp/>n,<sp/>&amp;link-&gt;<ref refid="structle__link_1a664ff487ad99834e931a73e512e81e77" kindref="member">event_oneshot_post_head</ref>,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;p-&gt;<ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__bt_free(p);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7.8.1<sp/>LE_SET_EVENT_MASK</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVENT<sp/>MASK(LE<sp/>META<sp/>EVENT<sp/>MASK)</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__event" kindref="compound">le_event</ref><sp/>*<ref refid="link__layer_8c_1abc9c6a4674cfd61fdb06391757963092" kindref="member">__alloc_event</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structle__event_1ab74223808984016942f318a292344e19" kindref="member">len</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>va_list<sp/>argptr)</highlight></codeline>
<codeline lineno="401"><highlight class="normal">{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__event" kindref="compound">le_event</ref><sp/>*<ref refid="structle__event_1a8c985639846e2e460390a36009756a84" kindref="member">event</ref>;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structle__event_1ab74223808984016942f318a292344e19" kindref="member">len</ref><sp/>+=<sp/>__vsprintf_len(format,<sp/>argptr);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>lbuf_alloc_btctrler(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;pEVT,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*event)<sp/>+<sp/><ref refid="structle__event_1ab74223808984016942f318a292344e19" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT(event<sp/>!=<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;%d,<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="structle__event_1ab74223808984016942f318a292344e19" kindref="member">len</ref>,<sp/>format);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;len<sp/>=<sp/><ref refid="structle__event_1ab74223808984016942f318a292344e19" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structle__event_1a8c985639846e2e460390a36009756a84" kindref="member">event</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ae47fdd4777580658df3138aeb05507eb" kindref="member">meta_event_mask</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subevent_code)</highlight></codeline>
<codeline lineno="417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hci_param.event_mask[LE_META_EVENT<sp/>/<sp/>8]<sp/>&amp;<sp/>BIT(LE_META_EVENT<sp/>%<sp/>8))<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subevent_code<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1aa5cbefc401ae1a973146f4102c0afb87" kindref="member">event_mask</ref>[subevent_code<sp/>/<sp/>8]<sp/>&amp;<sp/>BIT(subevent_code<sp/>%<sp/>8))<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;LE<sp/>event<sp/>mask<sp/>disable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a4e5a29b6bb078f3eda716888d15412a5" kindref="member">__hci_emit_le_meta_event</ref>(u8<sp/>subevent_code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__event" kindref="compound">le_event</ref><sp/>*<ref refid="structle__event_1a8c985639846e2e460390a36009756a84" kindref="member">event</ref>;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8c_1ae47fdd4777580658df3138aeb05507eb" kindref="member">meta_event_mask</ref>(subevent_code)<sp/>==<sp/>FALSE)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>argptr;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(argptr,<sp/>format);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/><ref refid="link__layer_8c_1abc9c6a4674cfd61fdb06391757963092" kindref="member">__alloc_event</ref>(1,<sp/>format,<sp/>argptr);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(event<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;event<sp/>len<sp/>:<sp/>%x&quot;,<sp/>event-&gt;len);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;event<sp/>=<sp/>HCI_EVENT_LE_META;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;data[0]<sp/>=<sp/>subevent_code;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(argptr,<sp/>format);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>__vsprintf(event-&gt;<ref refid="structle__event_1a9eb7fa03d54d99f1b2fb8cc255a6dac7" kindref="member">data</ref><sp/>+<sp/>1,<sp/>format,<sp/>argptr);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(argptr);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HCI_PATH_OPTIMIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a11821d1dd74b0eec8a3450c251d55987" kindref="member">hci_transport</ref>-&gt;send_packet(HCI_EVENT_PACKET,<sp/>(u8<sp/>*)event,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*event)<sp/>+<sp/>event-&gt;<ref refid="structle__event_1ab74223808984016942f318a292344e19" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>lbuf_free_btctrler(event);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>lbuf_push_btctrler(event);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//resume<sp/>ll<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>thread_resume(&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;thread);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>0;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a42594a7a51e289fd061d0a7ba63fcb46" kindref="member">le_meta_event_upload</ref>()</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HCI_PATH_OPTIMIZED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>awake<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__event" kindref="compound">le_event</ref><sp/>*<ref refid="structle__event_1a8c985639846e2e460390a36009756a84" kindref="member">event</ref>;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>lbuf_pop_btctrler(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;pEVT);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;META<sp/>EVT<sp/>&lt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info_hexdump((u8<sp/>*)event,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*event)<sp/>+<sp/>event-&gt;<ref refid="structle__event_1ab74223808984016942f318a292344e19" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a11821d1dd74b0eec8a3450c251d55987" kindref="member">hci_transport</ref>-&gt;send_packet(HCI_EVENT_PACKET,<sp/>(u8<sp/>*)event,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*event)<sp/>+<sp/>event-&gt;<ref refid="structle__event_1ab74223808984016942f318a292344e19" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lbuf_free_btctrler(event);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>awake<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>awake;</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*<ref refid="link__layer_8c_1abc4e9f5d633715feaca1a405e2b855ad" kindref="member">ll_link_for_address</ref>(u8<sp/>addr_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*addr)</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;number<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_error(&quot;No<sp/>ll<sp/>link&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry(link,<sp/>&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;le_links,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((addr_type<sp/>==<sp/>link-&gt;<ref refid="structle__link_1a52d479673baea4451d7fabf6b91916ee" kindref="member">peer</ref>.addr_type)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(!memcmp(link-&gt;<ref refid="structle__link_1a52d479673baea4451d7fabf6b91916ee" kindref="member">peer</ref>.addr,<sp/>addr,<sp/>6)))<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>link;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*<ref refid="link__layer_8c_1a1809d336252af947726fd5e404fdf0c9" kindref="member">ll_link_for_state</ref>(u8<sp/><ref refid="structle__link_1a3d4a7395fc00c95d0f8edebb98d87721" kindref="member">state</ref>)</highlight></codeline>
<codeline lineno="514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;number<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_error(&quot;No<sp/>ll<sp/>link&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry(link,<sp/>&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;le_links,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1a3d4a7395fc00c95d0f8edebb98d87721" kindref="member">state</ref><sp/>==<sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>link;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*<ref refid="link__layer_8c_1ad0cf3cf97fdaf769c891098d100efedc" kindref="member">ll_link_for_handle</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structle__link_1a6843fe2a32b8f30d12019f50f0363a91" kindref="member">handle</ref>)</highlight></codeline>
<codeline lineno="534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;number<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_error(&quot;handle<sp/>No<sp/>ll<sp/>link&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry(link,<sp/>&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;le_links,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//log_info(&quot;link-&gt;handle<sp/>:<sp/>0x%x&quot;,<sp/>link-&gt;handle);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1a6843fe2a32b8f30d12019f50f0363a91" kindref="member">handle</ref><sp/>==<sp/>handle)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>link;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*<ref refid="link__layer_8c_1af4ce716efbd2f5c457a9827d58ccc0e3" kindref="member">get_ll_link_from_cur_number</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ad0cf3cf97fdaf769c891098d100efedc" kindref="member">ll_link_for_handle</ref>(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;number);</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a217df2024361d6474d56b61aaa11cf47" kindref="member">free_link_handle</ref>(u16<sp/><ref refid="structle__link_1a6843fe2a32b8f30d12019f50f0363a91" kindref="member">handle</ref>)</highlight></codeline>
<codeline lineno="560"><highlight class="normal">{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>handle<sp/>&amp;=<sp/>0xf;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;handle<sp/>&amp;=<sp/>~BIT(handle);</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="568"><highlight class="normal">u16<sp/><ref refid="link__layer_8c_1a0338806fdff047d16e9da9911f8070f6" kindref="member">get_ble_link_handle</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ll__defines_8h_1a85d6651d561d95e754da8e6cae59eaa1" kindref="member">BLE_LINK_HANDLE</ref>;</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="574"><highlight class="normal">u16<sp/><ref refid="link__layer_8c_1a6e5baec9e508d5b2ffb401d84be3ad1b" kindref="member">alloc_link_handle</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="575"><highlight class="normal">{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>u16<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;handle<sp/>&amp;<sp/>BIT(i))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;handle<sp/>|=<sp/>BIT(i);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(i<sp/>&lt;<sp/>16,<sp/></highlight><highlight class="stringliteral">&quot;alloc_link_handle<sp/>error\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(i<sp/>|<sp/><ref refid="ll__defines_8h_1a85d6651d561d95e754da8e6cae59eaa1" kindref="member">BLE_LINK_HANDLE</ref>);</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">u8<sp/><ref refid="link__layer_8c_1ac6a987f10797d3dcd080f25b9c6f038f" kindref="member">hop_generarate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="590"><highlight class="normal">{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>hop;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>hop<sp/>=<sp/>JL_RAND-&gt;R64H<sp/>%<sp/>17;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>hop<sp/>=<sp/>(hop<sp/>&lt;<sp/>5)<sp/>?<sp/>5<sp/>:<sp/>hop;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hop;</highlight></codeline>
<codeline lineno="597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*<ref refid="link__layer_8c_1a500af8812cc7e935661ef18be52a97d1" kindref="member">ll_create_conn_link</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref>,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>le_addr<sp/>*local_addr,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u8<sp/><ref refid="structle__link_1ac771cd600e00debf1db06d88887f6f95" kindref="member">role</ref>,<sp/>u8<sp/>peer_addr_type,<sp/>u8<sp/>peer_addr[6],</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structle__link_1ab37919366a48faa1b5e84c8b141cd189" kindref="member">ll_data</ref>)</highlight></codeline>
<codeline lineno="602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LE_ROLES_IS_SUPPORT((LE_MASTER<sp/>|<sp/>LE_SLAVE))<sp/>==<sp/>0x0)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;No<sp/>either<sp/>LE_MASTER<sp/>or<sp/>LE_SLAVE<sp/>support&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>link<sp/>=<sp/>__bt_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref>));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;conn<sp/>link<sp/>NULL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(link,<sp/>0x0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref>));</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//link<sp/>info<sp/>switch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref><sp/>=<sp/><ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref>;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;link-&gt;<ref refid="structle__link_1a3e93293e6726eb0cee1b5702b0587eef" kindref="member">local</ref>,<sp/>local_addr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>le_addr));</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1a52d479673baea4451d7fabf6b91916ee" kindref="member">peer</ref>.addr_type<sp/>=<sp/>peer_addr_type;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(link-&gt;<ref refid="structle__link_1a52d479673baea4451d7fabf6b91916ee" kindref="member">peer</ref>.addr,<sp/>peer_addr,<sp/>6);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1ac771cd600e00debf1db06d88887f6f95" kindref="member">role</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="structle__link_1ac771cd600e00debf1db06d88887f6f95" kindref="member">role</ref>;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8h_1ae10f97c34c30ab4d52daa0108608dd2b" kindref="member">ROLE_IS_SLAVE</ref>(link))<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a6665ff63058f613583d0c7235abc45a5" kindref="member">ll_slave_set_connection_param</ref>(&amp;link-&gt;<ref refid="structle__link_1ab37919366a48faa1b5e84c8b141cd189" kindref="member">ll_data</ref>,<sp/>ll_data);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;LL<sp/>data&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info_hexdump(&amp;link-&gt;ll_data,<sp/>22);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;link-&gt;<ref refid="structle__link_1ab37919366a48faa1b5e84c8b141cd189" kindref="member">ll_data</ref>,<sp/>ll_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>ble_conn_param));</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>__ble_ops-&gt;ioctrl(link-&gt;<ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref>,<sp/>BLE_SET_CONN_PARAM,<sp/>&amp;link-&gt;<ref refid="structle__link_1ab37919366a48faa1b5e84c8b141cd189" kindref="member">ll_data</ref>);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;link-&gt;<ref refid="structle__link_1a88fb391038e5fe54238931374d8d7a71" kindref="member">rx_oneshot_head</ref>);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;link-&gt;<ref refid="structle__link_1afce6e4811f1c0343b6017b56dc04d519" kindref="member">event_oneshot_head</ref>);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;link-&gt;<ref refid="structle__link_1a7f819d0d18a748b355c9277d2bb0f226" kindref="member">acl_packet_head</ref>);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;link-&gt;<ref refid="structle__link_1a664ff487ad99834e931a73e512e81e77" kindref="member">event_oneshot_post_head</ref>);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1a3d4a7395fc00c95d0f8edebb98d87721" kindref="member">state</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="link__layer_8h_1ac36f475ca5b446f4fde4c9b90bec77c8ad94641dceaa42b8c9d91d2231c06b76c" kindref="member">LL_CONNECTION_CREATE</ref>;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>__ble_ops-&gt;handler_register(link-&gt;<ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref>,<sp/>link,<sp/>&amp;<ref refid="link__layer_8c_1a6acb3ca6c474d2b4d1ec01ec741812cc" kindref="member">conn_handler</ref>);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//1.25ms<sp/>+<sp/>winsize<sp/>+<sp/>winoffset<sp/>|<sp/>6<sp/>interval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//LL_CONNECTION_ESTABLISHED<sp/>set<sp/>ll<sp/>connSupervision<sp/>timeout<sp/>6*interval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a3db8a1fb4120c21fb588dc9dffc1a4b3" kindref="member">__event_oneshot_post_add</ref>(link,<sp/><ref refid="link__layer_8c_1a19ed6a89fc0ead9855b405690d215d41" kindref="member">ll_conn_fast_supervision_timer_handler</ref>,<sp/>6);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>link;</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a076ebfdffad3a441785c9ab717d26551" kindref="member">ll_create_conn_link_post</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>os_mutex_create(&amp;link-&gt;<ref refid="structle__link_1a110d6defcd65ab188de2cdb21ec7db07" kindref="member">lock</ref>);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1a6843fe2a32b8f30d12019f50f0363a91" kindref="member">handle</ref><sp/>=<sp/><ref refid="link__layer_8c_1a6e5baec9e508d5b2ffb401d84be3ad1b" kindref="member">alloc_link_handle</ref>();</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1adfe0094f7a3b886e14b4f8b9496588d6" kindref="member">auth_timeout_ms</ref><sp/>=<sp/><ref refid="ll__defines_8h_1a8c39eb532c6f3d30616de8f52654edd3" kindref="member">LL_DEF_AUTH_TO_MS</ref>;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1a76973c395d239899ceebed57430aee68" kindref="member">ping_timeout_ms</ref><sp/>=<sp/><ref refid="llcp__sm__ping_8c_1a12475ff84e2d5c98d1588e5f610752a3" kindref="member">ll_calc_ping_ms</ref>(link,<sp/><ref refid="ll__defines_8h_1a8c39eb532c6f3d30616de8f52654edd3" kindref="member">LL_DEF_AUTH_TO_MS</ref>);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;Auth<sp/>TO<sp/>default<sp/>:<sp/>%d(ms)&quot;,<sp/>link-&gt;auth_timeout_ms);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;Ping<sp/>TO<sp/>default<sp/>:<sp/>%d(ms)&quot;,<sp/>link-&gt;ping_timeout_ms);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__data__extension_8c_1a9a0f0b43c13271a2d886b3182f27cf2d" kindref="member">link_data_extension_init</ref>(link);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8h_1ae256d8c6819101ce2cc49f9a7f5872ad" kindref="member">link_phy_init</ref>(link);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__pc_8c_1a48979700e19b56fbaf8bce4682cd4d70" kindref="member">link_power_control_init</ref>(link);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;number++;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add_tail(&amp;link-&gt;<ref refid="structle__link_1a5ef73f659542ece19d89bc99d9e326d6" kindref="member">entry</ref>,<sp/>&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;le_links);</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a95a914a1e7d9133f5fb1d9108937a881" kindref="member">ll_close_conn_link</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//free<sp/>child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1aa79e0d8a84827ad8faf73db8d88c5105" kindref="member">__rx_oneshot_destroy</ref>(link);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a66760bbdd0e3644514b700113f206396" kindref="member">__event_oneshot_destroy</ref>(link);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a7963e2151a1d547f706b2a6f19071bfc" kindref="member">__event_oneshot_post_destroy</ref>(link);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a57d3734a85937461967ed9b2fb0fdcc0" kindref="member">ll_sent_acl_packet_destroy</ref>(link);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1a29831ff77d2ce522910178e30b94da63" kindref="member">cte_rx_param</ref>)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;free<sp/>cte<sp/>rx<sp/>param\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__bt_free(link-&gt;<ref refid="structle__link_1a29831ff77d2ce522910178e30b94da63" kindref="member">cte_rx_param</ref>);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1a3323edf6ca0af83ed4491ef733b641f3" kindref="member">cte_tx_param</ref>)<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;free<sp/>cte<sp/>tx<sp/>param\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__bt_free(link-&gt;<ref refid="structle__link_1a3323edf6ca0af83ed4491ef733b641f3" kindref="member">cte_tx_param</ref>);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref>)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ble_ops-&gt;close(link-&gt;<ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref>);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//free<sp/>father</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>list_del(&amp;link-&gt;<ref refid="structle__link_1a5ef73f659542ece19d89bc99d9e326d6" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a217df2024361d6474d56b61aaa11cf47" kindref="member">free_link_handle</ref>(link-&gt;<ref refid="structle__link_1a6843fe2a32b8f30d12019f50f0363a91" kindref="member">handle</ref>);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;number--;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>os_mutex_del(&amp;link-&gt;<ref refid="structle__link_1a110d6defcd65ab188de2cdb21ec7db07" kindref="member">lock</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>__bt_free(link);</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a33c1e91118feac64f1143195e30be576" kindref="member">ll_delete_link</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="718"><highlight class="normal">{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>LE_ROLES_IS_SUPPORT_OPTIMIZE((LE_MASTER<sp/>|<sp/>LE_SLAVE));</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>os_mutex_pend(&amp;link-&gt;<ref refid="structle__link_1a110d6defcd65ab188de2cdb21ec7db07" kindref="member">lock</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ae325f6e7122c8e14643f126bae293fe2" kindref="member">ll_response_timeout_stop</ref>(link);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ac0e5071b1cc989a1341bde4f4f76752c" kindref="member">ll_supervision_timeout_stop</ref>(link);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a64ed22035ac4901e96855c101b087879" kindref="member">ll_auth_timeout_stop</ref>(link);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a82ef696123973169710ea7e029be17be" kindref="member">ll_ping_timeout_stop</ref>(link);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1abc3e4d56810bad81718c75f07fc2262d" kindref="member">ll_resolution_disable</ref>();</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a95a914a1e7d9133f5fb1d9108937a881" kindref="member">ll_close_conn_link</ref>(link);</highlight></codeline>
<codeline lineno="734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Link<sp/>Layer<sp/>Control<sp/>Data<sp/>(only<sp/>for<sp/>link<sp/>control<sp/>layer<sp/>used)</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a8c46755c6f40e08f19ca426a8f7bc360" kindref="member">ll_send_control_data</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opcode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...)</highlight></codeline>
<codeline lineno="742"><highlight class="normal">{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>argptr;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(argptr,<sp/>format);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(__vsprintf_len(format,<sp/>argptr)<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(link-&gt;<ref refid="structle__link_1a1ff576bdbb2004a16fff3b5a63424783" kindref="member">send_buf</ref>));</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1a1ff576bdbb2004a16fff3b5a63424783" kindref="member">send_buf</ref>[0]<sp/>=<sp/>opcode;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format)<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_start(argptr,<sp/>format);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>+=<sp/>__vsprintf(link-&gt;<ref refid="structle__link_1a1ff576bdbb2004a16fff3b5a63424783" kindref="member">send_buf</ref><sp/>+<sp/>1,<sp/>format,<sp/>argptr);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_end(argptr);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//log_info_hexdump(link-&gt;send_buf,<sp/>len);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>__ble_ops-&gt;send_packet(link-&gt;hw,<sp/>LL_CONTROL_PDU,<sp/>link-&gt;send_buf,<sp/>len);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>__ble_ops-&gt;send_packet_high(link-&gt;<ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref>,<sp/>NULL,<sp/>LL_CONTROL_PDU,<sp/>link-&gt;<ref refid="structle__link_1a1ff576bdbb2004a16fff3b5a63424783" kindref="member">send_buf</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1acd6f8fd33bf171094abb9ba83c2a4fd1" kindref="member">ll_send_control_data_callback</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opcode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...)</highlight></codeline>
<codeline lineno="764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>argptr;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(argptr,<sp/>format);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(__vsprintf_len(format,<sp/>argptr)<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(link-&gt;<ref refid="structle__link_1a1ff576bdbb2004a16fff3b5a63424783" kindref="member">send_buf</ref>));</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1a1ff576bdbb2004a16fff3b5a63424783" kindref="member">send_buf</ref>[0]<sp/>=<sp/>opcode;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_start(argptr,<sp/>format);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>+=<sp/>__vsprintf(link-&gt;<ref refid="structle__link_1a1ff576bdbb2004a16fff3b5a63424783" kindref="member">send_buf</ref><sp/>+<sp/>1,<sp/>format,<sp/>argptr);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_end(argptr);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//log_info_hexdump(link-&gt;send_buf,<sp/>len);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>__ble_ops-&gt;send_packet(link-&gt;hw,<sp/>LL_CONTROL_PDU,<sp/>link-&gt;send_buf,<sp/>len);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>__ble_ops-&gt;send_packet_high(link-&gt;<ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref>,<sp/>callback,<sp/>LL_CONTROL_PDU,<sp/>link-&gt;<ref refid="structle__link_1a1ff576bdbb2004a16fff3b5a63424783" kindref="member">send_buf</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Link<sp/>Layer<sp/>ACL<sp/>Data<sp/>(for<sp/>Upper<sp/>layer<sp/>used)</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a72b2e5a166b1d7637bc1571dc1da7be1" kindref="member">ll_send_acl_packet</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structle__link_1a6843fe2a32b8f30d12019f50f0363a91" kindref="member">handle</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*packet,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>acl_fragmentation_total_size)</highlight></codeline>
<codeline lineno="791"><highlight class="normal">{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="link__layer_8c_1ad0cf3cf97fdaf769c891098d100efedc" kindref="member">ll_link_for_handle</ref>(<ref refid="structle__link_1a6843fe2a32b8f30d12019f50f0363a91" kindref="member">handle</ref>);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ASSERT(link<sp/>!=<sp/>NULL,<sp/>&quot;%s&quot;,<sp/>__func__);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;TX<sp/>link<sp/>NULL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>os_mutex_pend(&amp;link-&gt;<ref refid="structle__link_1a110d6defcd65ab188de2cdb21ec7db07" kindref="member">lock</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>pb_flag,<sp/>bc_flag;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_flag<sp/>=<sp/>packet[1];</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_flag<sp/>&gt;&gt;=<sp/>4;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>bc_flag<sp/>=<sp/>packet[1];</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>bc_flag<sp/>&gt;&gt;=<sp/>6;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>current_acl_length;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*acl_fragmentation_pos;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//packet<sp/>payload<sp/>begin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>acl_fragmentation_pos<sp/>=<sp/>packet<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//flow<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//create<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structacl__fragment__packet" kindref="compound">acl_fragment_packet</ref><sp/>*acl_packet;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//fill<sp/>in<sp/>node<sp/>info<sp/>1<sp/>fragment<sp/>N<sp/>RF<sp/>packets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>acl_packet<sp/>=<sp/><sp/>__bt_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structacl__fragment__packet" kindref="compound">acl_fragment_packet</ref>));</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(acl_packet<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>acl_packet-&gt;<ref refid="structacl__fragment__packet_1a1e6ac0e71e90e17cc34171cb41fef431" kindref="member">num_acl_packets_sent</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>u16<sp/>connEffectiveTxOctets<sp/>=<sp/>link-&gt;<ref refid="structle__link_1aaae575da78dd226d0a35d6765af60788" kindref="member">pdu_len</ref>.<ref refid="structdata__length_1ad924d638718839a2ca759107de1758fc" kindref="member">connEffectiveMaxTxOctets</ref>;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connEffectiveTxOctets<sp/>!=<sp/>link-&gt;<ref refid="structle__link_1aaae575da78dd226d0a35d6765af60788" kindref="member">pdu_len</ref>.<ref refid="structdata__length_1af1bd52f4629173cdf5e7ac02e17bc788" kindref="member">PreConnEffectiveTxOctets</ref>)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(FALSE<sp/>==<sp/>list_empty(&amp;link-&gt;<ref refid="structle__link_1a7f819d0d18a748b355c9277d2bb0f226" kindref="member">acl_packet_head</ref>))<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;T&apos;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os_time_dly(1);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1aaae575da78dd226d0a35d6765af60788" kindref="member">pdu_len</ref>.<ref refid="structdata__length_1af1bd52f4629173cdf5e7ac02e17bc788" kindref="member">PreConnEffectiveTxOctets</ref><sp/>=<sp/>connEffectiveTxOctets;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;tx<sp/>len&quot;);put_u32hex(acl_fragmentation_total_size);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Continuing<sp/>fragment<sp/>of<sp/>Higher<sp/>Layer<sp/>Message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_acl_length<sp/>=<sp/>(acl_fragmentation_total_size<sp/>&gt;<sp/>connEffectiveTxOctets)<sp/>?</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connEffectiveTxOctets<sp/>:<sp/>acl_fragmentation_total_size;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_debug(&quot;TX<sp/>:<sp/>DATA&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_debug_hexdump((u8<sp/>*)acl_fragmentation_pos,<sp/>current_acl_length);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((pb_flag<sp/>&amp;<sp/>0x1)<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(acl_packet-&gt;<ref refid="structacl__fragment__packet_1a1e6ac0e71e90e17cc34171cb41fef431" kindref="member">num_acl_packets_sent</ref><sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;S&apos;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ble_ops-&gt;send_packet(link-&gt;<ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref>,<sp/>LL_DATA_PDU_START,<sp/>\</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acl_fragmentation_pos,<sp/>current_acl_length,<sp/>connEffectiveTxOctets);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;C&apos;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ble_ops-&gt;send_packet(link-&gt;<ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref>,<sp/>LL_DATA_PDU_CONTINUE,<sp/>\</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acl_fragmentation_pos,<sp/>current_acl_length,<sp/>connEffectiveTxOctets);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acl_fragmentation_pos<sp/>+=<sp/>current_acl_length;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acl_fragmentation_total_size<sp/>-=<sp/>current_acl_length;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acl_packet-&gt;<ref refid="structacl__fragment__packet_1a1e6ac0e71e90e17cc34171cb41fef431" kindref="member">num_acl_packets_sent</ref>++;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;&gt;&gt;&gt;&gt;&gt;num_acl_packets_sent<sp/>%d&quot;,<sp/>acl_packet-&gt;num_acl_packets_sent);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(acl_fragmentation_total_size);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>local_irq_disable();</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add_tail(&amp;acl_packet-&gt;<ref refid="structacl__fragment__packet_1acefb1a63c74d55644448acd51339fb3d" kindref="member">entry</ref>,<sp/>&amp;link-&gt;<ref refid="structle__link_1a7f819d0d18a748b355c9277d2bb0f226" kindref="member">acl_packet_head</ref>);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>local_irq_enable();</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;ll_send_acl_exit&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>os_mutex_post(&amp;link-&gt;<ref refid="structle__link_1a110d6defcd65ab188de2cdb21ec7db07" kindref="member">lock</ref>);</highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>u8<sp/><ref refid="link__layer_8c_1aa5d0868ff3a3bbcc494d91ee7e589639" kindref="member">ll_sent_acl_packet</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="869"><highlight class="normal">{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structacl__fragment__packet" kindref="compound">acl_fragment_packet</ref><sp/>*p,<sp/>*n;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(p,<sp/>n,<sp/>&amp;link-&gt;<ref refid="structle__link_1a7f819d0d18a748b355c9277d2bb0f226" kindref="member">acl_packet_head</ref>,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;ll_is_packet_send<sp/>pkt<sp/>cnt<sp/>%x&quot;,<sp/>p-&gt;cnt);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;&lt;&lt;&lt;&lt;&lt;num_acl_packets_sent<sp/>%d&quot;,<sp/>p-&gt;num_acl_packets_sent);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structacl__fragment__packet_1a1e6ac0e71e90e17cc34171cb41fef431" kindref="member">num_acl_packets_sent</ref>--;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p-&gt;<ref refid="structacl__fragment__packet_1a1e6ac0e71e90e17cc34171cb41fef431" kindref="member">num_acl_packets_sent</ref>)<sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;p-&gt;<ref refid="structacl__fragment__packet_1acefb1a63c74d55644448acd51339fb3d" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__bt_free(p);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a57d3734a85937461967ed9b2fb0fdcc0" kindref="member">ll_sent_acl_packet_destroy</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="887"><highlight class="normal">{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structacl__fragment__packet" kindref="compound">acl_fragment_packet</ref><sp/>*p,<sp/>*n;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(p,<sp/>n,<sp/>&amp;link-&gt;<ref refid="structle__link_1a7f819d0d18a748b355c9277d2bb0f226" kindref="member">acl_packet_head</ref>,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;p-&gt;<ref refid="structacl__fragment__packet_1acefb1a63c74d55644448acd51339fb3d" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__bt_free(p);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a72e6771a003fef9da29111e0d4c7974e" kindref="member">device_addr_verify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*addr,<sp/>u8<sp/>start,<sp/>u8<sp/>len)</highlight></codeline>
<codeline lineno="902"><highlight class="normal">{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>i,<sp/>res;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>addr_temp[6];</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(addr_temp,<sp/>addr,<sp/>6);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>All<sp/>bits<sp/>of<sp/>the<sp/>random<sp/>part<sp/>of<sp/>the<sp/>address<sp/>shall<sp/>not<sp/>be<sp/>equal<sp/>to<sp/>1<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>start;<sp/>i<sp/>&lt;<sp/>start<sp/>+<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//MSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr_temp[i]<sp/>&amp;=<sp/>0x3f;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr_temp[i]<sp/>|=<sp/>0xc0;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>&amp;=<sp/>addr_temp[i];</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/>0xff)<sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;addr<sp/>verify<sp/>fail<sp/>all<sp/>1!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>All<sp/>bits<sp/>of<sp/>the<sp/>random<sp/>part<sp/>of<sp/>the<sp/>address<sp/>shall<sp/>not<sp/>be<sp/>equal<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>start;<sp/>i<sp/>&lt;<sp/>start<sp/>+<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//MSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr_temp[i]<sp/>&amp;=<sp/>0x3f;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>|=<sp/>addr_temp[i];</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/>0x00)<sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;addr<sp/>verify<sp/>fail<sp/>all<sp/>0!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;addr<sp/>verify<sp/>pass!&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a7c9351015b74e57dfff1316dbf235a9e" kindref="member">__ll_random_device_addr_verify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*addr)</highlight></codeline>
<codeline lineno="943"><highlight class="normal">{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>two<sp/>most<sp/>significant<sp/>bits<sp/>of<sp/>the<sp/>address<sp/>shall<sp/>be<sp/>equal<sp/>to<sp/>1<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((addr[5]<sp/>&amp;<sp/>0xC0)<sp/>!=<sp/>0xC0)<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a72e6771a003fef9da29111e0d4c7974e" kindref="member">device_addr_verify</ref>(addr,<sp/>0,<sp/>6);</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ad0aaeb5ff2f2714f9a6e8a80fec36515" kindref="member">ll_disconnect_process</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,<sp/>u8<sp/>reason)</highlight></codeline>
<codeline lineno="953"><highlight class="normal">{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>u16<sp/>handle<sp/>=<sp/>link-&gt;<ref refid="structle__link_1a6843fe2a32b8f30d12019f50f0363a91" kindref="member">handle</ref>;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//skip<sp/>already<sp/>disconnect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8h_1a58f79fd06696296c2bb42a67df96fa39" kindref="member">LE_IS_DISCONNECT</ref>(link))<sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;Already<sp/>disconnect&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>Set<sp/>Termination<sp/>state<sp/>for<sp/>run<sp/>loop<sp/>process*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1a3d4a7395fc00c95d0f8edebb98d87721" kindref="member">state</ref><sp/>=<sp/><ref refid="link__layer_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a1499826c883cd78d147a1b3b5620dc7c" kindref="member">LL_DISCONNECT</ref>;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__events_8c_1a40a8d4fa8f4b8d8bc860ab18128bdd5b" kindref="member">hci_event_disconnection_complete</ref>(handle,<sp/>reason);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>Async<sp/>event<sp/>resume<sp/>ll_thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>thread_resume(&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;thread);</highlight></codeline>
<codeline lineno="968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LL<sp/>Supervision<sp/>TimeOut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a19ed6a89fc0ead9855b405690d215d41" kindref="member">ll_conn_fast_supervision_timer_handler</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="973"><highlight class="normal">{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ad0aaeb5ff2f2714f9a6e8a80fec36515" kindref="member">ll_disconnect_process</ref>(link,<sp/>CONNECTION_FAILED_TO_BE_ESTABLISHED);</highlight></codeline>
<codeline lineno="975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><ref refid="link__layer_8c_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ac0e5071b1cc989a1341bde4f4f76752c" kindref="member">ll_supervision_timeout_stop</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="979"><highlight class="normal">{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1aaedac40124ec9a83ddd2c7b57c97f9e2" kindref="member">supervision_timeout</ref>)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_timer_remove(link-&gt;<ref refid="structle__link_1aaedac40124ec9a83ddd2c7b57c97f9e2" kindref="member">supervision_timeout</ref>);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1aaedac40124ec9a83ddd2c7b57c97f9e2" kindref="member">supervision_timeout</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><ref refid="link__layer_8c_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1aeb97f23eb3cf24bbfd376d67e73b413f" kindref="member">ll_conn_supervision_timer_handler</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*priv)</highlight></codeline>
<codeline lineno="988"><highlight class="normal">{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*)priv;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ASSERT(link<sp/>!=<sp/>NULL,<sp/>&quot;%s&quot;,<sp/>__func__);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1aadb1c152d5ce09030e3e52745b7b16d6" kindref="member">SIGNAL_DEBUG_TIMEOUT</ref>(A,<sp/>15);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;TO<sp/>-<sp/>ll_conn_supervision_timer_handler&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ac0e5071b1cc989a1341bde4f4f76752c" kindref="member">ll_supervision_timeout_stop</ref>(link);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DEBUG_IOB_1(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//while(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/><ref refid="structle__link_1a876d9d1bbdf8903ac13b853901e7587c" kindref="member">reason</ref>;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>reason<sp/>=<sp/><ref refid="link__layer_8h_1ab7af43e3e4f04ca42c081297cb629de1" kindref="member">LE_IS_CONNECT</ref>(link)<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONNECTION_TIMEOUT<sp/>:<sp/>CONNECTION_FAILED_TO_BE_ESTABLISHED<sp/>;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ad0aaeb5ff2f2714f9a6e8a80fec36515" kindref="member">ll_disconnect_process</ref>(link,<sp/>reason);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ASSERT(0,<sp/>&quot;Timeout&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><ref refid="link__layer_8c_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1aa9eb9f1e5abe4f9a25af82c730b9d308" kindref="member">ll_supervision_timeout_start</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,<sp/>u32<sp/>timeout)</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>ll<sp/>connSupervision<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1aaedac40124ec9a83ddd2c7b57c97f9e2" kindref="member">supervision_timeout</ref><sp/>=<sp/>sys_timer_register(timeout,<sp/><ref refid="link__layer_8c_1aeb97f23eb3cf24bbfd376d67e73b413f" kindref="member">ll_conn_supervision_timer_handler</ref>);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(link-&gt;<ref refid="structle__link_1aaedac40124ec9a83ddd2c7b57c97f9e2" kindref="member">supervision_timeout</ref>);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>sys_timer_set_context(link-&gt;<ref refid="structle__link_1aaedac40124ec9a83ddd2c7b57c97f9e2" kindref="member">supervision_timeout</ref>,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)link);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1aa519abe78aba7f3ce911e32a6aa97507" kindref="member">ll_supervision_timeout_reset</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="1025"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1aaedac40124ec9a83ddd2c7b57c97f9e2" kindref="member">supervision_timeout</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_timer_reset(link-&gt;<ref refid="structle__link_1aaedac40124ec9a83ddd2c7b57c97f9e2" kindref="member">supervision_timeout</ref>);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a5c15284e0ac852b39f699cd8b4f49127" kindref="member">ll_supervision_timeout_changeperiod</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,<sp/>u32<sp/>timeout)</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1aaedac40124ec9a83ddd2c7b57c97f9e2" kindref="member">supervision_timeout</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;ll_supervision_timeout_changeperiod<sp/>%d<sp/>(ms)&quot;</highlight><highlight class="normal">,<sp/>timeout);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_timer_change_period(link-&gt;<ref refid="structle__link_1aaedac40124ec9a83ddd2c7b57c97f9e2" kindref="member">supervision_timeout</ref>,<sp/>timeout);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><ref refid="link__layer_8c_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a5022824bdb10dd91b935cf5b7698d3f5" kindref="member">ll_set_conn_winsize</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8h_1ae10f97c34c30ab4d52daa0108608dd2b" kindref="member">ROLE_IS_SLAVE</ref>(link))<sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ble_ops-&gt;ioctrl(link-&gt;<ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref>,<sp/>BLE_SET_WINSIZE,<sp/>50,<sp/>link-&gt;<ref refid="structle__link_1ab37919366a48faa1b5e84c8b141cd189" kindref="member">ll_data</ref>.widening<sp/>*<sp/>2<sp/>+<sp/>50);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ble_ops-&gt;ioctrl(link-&gt;<ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref>,<sp/>BLE_SET_WINSIZE,<sp/>30,<sp/>0);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BLUETOOTH_5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8h_1af15c5d82ce2ba25a0555901d3467ff80" kindref="member">__reset_CodedPHY_conn_winsize</ref>(link);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a4ee1b0a31325b4fb5d17f7dfd325bf15" kindref="member">__instant_link_lost</ref>(u16<sp/><ref refid="structle__link_1adbc8a5c160dbe93c4edbd0610c1defea" kindref="member">instant</ref>,<sp/>u16<sp/>eventcnt)</highlight></codeline>
<codeline lineno="1055"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>u16<sp/>gap;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;Instant<sp/>:<sp/>%04x<sp/>-<sp/>%04x&quot;,<sp/>instant,<sp/>eventcnt);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>gap<sp/>=<sp/><ref refid="structle__link_1adbc8a5c160dbe93c4edbd0610c1defea" kindref="member">instant</ref><sp/>-<sp/>eventcnt;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((gap<sp/>&lt;<sp/>32767)<sp/>&amp;&amp;<sp/>(<ref refid="structle__link_1adbc8a5c160dbe93c4edbd0610c1defea" kindref="member">instant</ref><sp/>!=<sp/>eventcnt))<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1071"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1072"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler</highlight></codeline>
<codeline lineno="1073"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1074"><highlight class="comment"><sp/>*<sp/>--------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a40ded10d498adb7d518e5a0e15016532" kindref="member">ll_debug_info</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ble_conn_param<sp/>*ll_data<sp/>=<sp/>&amp;link-&gt;<ref refid="structle__link_1ab37919366a48faa1b5e84c8b141cd189" kindref="member">ll_data</ref>;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;role<sp/>is<sp/>slave<sp/>:<sp/>%02x&quot;,<sp/><sp/><sp/>ROLE_IS_SLAVE(link));<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;aa&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info_hexdump(ll_data-&gt;aa,<sp/>4);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;crcinit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info_hexdump(ll_data-&gt;crcinit,<sp/>3);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;winsize<sp/>:<sp/>%02x&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>ll_data-&gt;winsize);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;winoffset<sp/>:<sp/>%04x&quot;</highlight><highlight class="normal">,<sp/><sp/>ll_data-&gt;winoffset);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;interval:<sp/>%04x&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>ll_data-&gt;interval);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;latency<sp/>:<sp/>%04x&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>ll_data-&gt;latency);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;timeout<sp/>:<sp/>%04x&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>ll_data-&gt;timeout);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;channel<sp/>map&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info_hexdump(ll_data-&gt;channel,<sp/>5);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;hop:<sp/>%02x&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ll_data-&gt;hop);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;sca:<sp/>%02x&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ll_data-&gt;sca);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;widening<sp/>:<sp/>%04x&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>ll_data-&gt;widening);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ae7b0aca03048f3626e0e4833835b0fc2" kindref="member">conn_rx_acl_u_post_handler</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>ble_rx<sp/>*rx)</highlight></codeline>
<codeline lineno="1104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1a466268a12c08ec9be75352cbf778c420" kindref="member">encrypt_enable</ref><sp/>==<sp/><ref refid="llcp_8h_1abe974f22edeef8189603ba75fd90ff3cac85b5feede707e13ba9d2bf236bdf00a" kindref="member">LLCP_ENC_ENABLE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_timer_reset(link-&gt;<ref refid="structle__link_1ad9e02ac50aa1acfd3bedc34e8d9a0ed6" kindref="member">auth_timeout</ref>);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_timer_reset(link-&gt;<ref refid="structle__link_1a76973c395d239899ceebed57430aee68" kindref="member">ping_timeout_ms</ref>);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rx-&gt;len<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>rx-&gt;head[0]<sp/>=<sp/>link-&gt;<ref refid="structle__link_1a6843fe2a32b8f30d12019f50f0363a91" kindref="member">handle</ref>;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Packet_Boundary_Flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rx-&gt;llid<sp/>==<sp/>LL_DATA_PDU_CONTINUE)<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rx-&gt;head[1]<sp/>=<sp/>(link-&gt;<ref refid="structle__link_1a6843fe2a32b8f30d12019f50f0363a91" kindref="member">handle</ref><sp/>&gt;&gt;<sp/>8)<sp/>|<sp/>0x10;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rx-&gt;llid<sp/>==<sp/>LL_DATA_PDU_START)<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rx-&gt;head[1]<sp/>=<sp/>(link-&gt;<ref refid="structle__link_1a6843fe2a32b8f30d12019f50f0363a91" kindref="member">handle</ref><sp/>&gt;&gt;<sp/>8)<sp/>|<sp/>0x20;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>rx-&gt;head[2]<sp/>=<sp/>rx-&gt;len;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>rx-&gt;head[3]<sp/>=<sp/>rx-&gt;len<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_debug(&quot;ACL<sp/>&lt;&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_debug_hexdump((void<sp/>*)rx-&gt;head,<sp/>rx-&gt;len<sp/>+<sp/>sizeof(rx-&gt;head));<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hci_transport-&gt;send_packet(HCI_ACL_DATA_PACKET,<sp/>rx-&gt;head,<sp/>rx-&gt;len<sp/>+<sp/>sizeof(rx-&gt;head));<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lmp__hci_8h_1acc092bc04d809239a828cdfea2ea32db" kindref="member">hci_send_acl_data</ref>(rx-&gt;head,<sp/>rx-&gt;len<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rx-&gt;head));</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LL<sp/>Control<sp/>Procedure</highlight></codeline>
<codeline lineno="1137"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1acff02d394ee1e464b7195fddbaa2595f" kindref="member">ll_response_timeout_handler</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*priv)</highlight></codeline>
<codeline lineno="1140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*)priv;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ASSERT(link<sp/>!=<sp/>NULL,<sp/>&quot;%s&quot;,<sp/>__func__);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;TO<sp/>-<sp/>Response_Timeout&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ae325f6e7122c8e14643f126bae293fe2" kindref="member">ll_response_timeout_stop</ref>(link);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//emit<sp/>LE<sp/>Event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="llcp__sm__common_8c_1a12bbe680e52ca6f38b8c4a45e06460a8" kindref="member">ll_send_msg_id</ref>(link,<sp/><ref refid="link__layer_8h_1a0411cd49bb5b71852cecd93bcbf0ca2da2dd2188ac751ab6b3f15c0394785cf0e" kindref="member">LLCP_MSG_RESPOND_TIMEOUT</ref>);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>改为消息机制释放，与CIS<sp/>同步释放*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ad0aaeb5ff2f2714f9a6e8a80fec36515" kindref="member">ll_disconnect_process</ref>(link,<sp/>LMP_RESPONSE_TIMEOUT_LL_RESPONSE_TIMEOUT);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ae325f6e7122c8e14643f126bae293fe2" kindref="member">ll_response_timeout_stop</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1ab523599771d088f9452e37bd2d2baa46" kindref="member">response_timeout</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_timer_remove(link-&gt;<ref refid="structle__link_1ab523599771d088f9452e37bd2d2baa46" kindref="member">response_timeout</ref>);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1ab523599771d088f9452e37bd2d2baa46" kindref="member">response_timeout</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a040835a9a5dcc53faf649b31aa7991a3" kindref="member">ll_response_timeout_start</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="1169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1ab523599771d088f9452e37bd2d2baa46" kindref="member">response_timeout</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;repeat<sp/>Reg_Timeout&quot;</highlight><highlight class="normal">);</highlight><highlight class="comment">//trace<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ae325f6e7122c8e14643f126bae293fe2" kindref="member">ll_response_timeout_stop</ref>(link);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>procedure<sp/>response<sp/>timeout<sp/>timer<sp/>reaches<sp/>40<sp/>Seconds,<sp/>the<sp/>connection<sp/>is<sp/>considered<sp/>lost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1ab523599771d088f9452e37bd2d2baa46" kindref="member">response_timeout</ref><sp/>=<sp/>sys_timer_register(<ref refid="ll__defines_8h_1aed18c58c908518942fe5f75a0686c396" kindref="member">LL_T_PRT_SEC</ref><sp/>*<sp/>1000L,<sp/><ref refid="link__layer_8c_1acff02d394ee1e464b7195fddbaa2595f" kindref="member">ll_response_timeout_handler</ref>);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(link-&gt;<ref refid="structle__link_1ab523599771d088f9452e37bd2d2baa46" kindref="member">response_timeout</ref>);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>sys_timer_set_context(link-&gt;<ref refid="structle__link_1ab523599771d088f9452e37bd2d2baa46" kindref="member">response_timeout</ref>,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)link);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a74c679b118624612c9a59a2ac67d94f0" kindref="member">ll_response_timeout_reset</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="1184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>sys_timer_reset(link-&gt;<ref refid="structle__link_1ab523599771d088f9452e37bd2d2baa46" kindref="member">response_timeout</ref>);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>***************************************************************************/</highlight></codeline>
<codeline lineno="1194"><highlight class="comment">/*<sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a1c224d59c1d1af62cff64fee6e50745b" kindref="member">ll_auth_timeout_callback</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*priv)</highlight></codeline>
<codeline lineno="1196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*)priv;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a64ed22035ac4901e96855c101b087879" kindref="member">ll_auth_timeout_stop</ref>(link);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(RedBold</highlight><highlight class="stringliteral">&quot;TO<sp/>-<sp/>Auth_Timeout&quot;</highlight><highlight class="normal">Reset);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//emit<sp/>LE<sp/>Event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="llcp__sm__common_8c_1a12bbe680e52ca6f38b8c4a45e06460a8" kindref="member">ll_send_msg_id</ref>(link,<sp/><ref refid="link__layer_8h_1a0411cd49bb5b71852cecd93bcbf0ca2da823d3afce06488a9680e732a43751dcc" kindref="member">LLCP_MSG_AUTH_TIMEOUT</ref>);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>***************************************************************************/</highlight></codeline>
<codeline lineno="1217"><highlight class="comment">/*<sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a64ed22035ac4901e96855c101b087879" kindref="member">ll_auth_timeout_stop</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="1219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1ad9e02ac50aa1acfd3bedc34e8d9a0ed6" kindref="member">auth_timeout</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_timer_remove(link-&gt;<ref refid="structle__link_1ad9e02ac50aa1acfd3bedc34e8d9a0ed6" kindref="member">auth_timeout</ref>);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1ad9e02ac50aa1acfd3bedc34e8d9a0ed6" kindref="member">auth_timeout</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>***************************************************************************/</highlight></codeline>
<codeline lineno="1232"><highlight class="comment">/*<sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a5053fafb50478124120660c52a8a0173" kindref="member">ll_auth_timeout_start</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="1234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1ad9e02ac50aa1acfd3bedc34e8d9a0ed6" kindref="member">auth_timeout</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;repeat<sp/>Reg_Timeout&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//trace<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a64ed22035ac4901e96855c101b087879" kindref="member">ll_auth_timeout_stop</ref>(link);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1ad9e02ac50aa1acfd3bedc34e8d9a0ed6" kindref="member">auth_timeout</ref><sp/>=<sp/>sys_timer_register(link-&gt;<ref refid="structle__link_1adfe0094f7a3b886e14b4f8b9496588d6" kindref="member">auth_timeout_ms</ref>,<sp/><ref refid="link__layer_8c_1a1c224d59c1d1af62cff64fee6e50745b" kindref="member">ll_auth_timeout_callback</ref>);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(link-&gt;<ref refid="structle__link_1ad9e02ac50aa1acfd3bedc34e8d9a0ed6" kindref="member">auth_timeout</ref>);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>sys_timer_set_context(link-&gt;<ref refid="structle__link_1ad9e02ac50aa1acfd3bedc34e8d9a0ed6" kindref="member">auth_timeout</ref>,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)link);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>***************************************************************************/</highlight></codeline>
<codeline lineno="1252"><highlight class="comment">/*<sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a7c3f59306e63dba2cfa47003cdfc843a" kindref="member">ll_ping_timeout_callback</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*priv)</highlight></codeline>
<codeline lineno="1254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*)priv;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a82ef696123973169710ea7e029be17be" kindref="member">ll_ping_timeout_stop</ref>(link);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>log_error(BlueBold</highlight><highlight class="stringliteral">&quot;TO<sp/>-<sp/>Ping_Timeout&quot;</highlight><highlight class="normal">Reset);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//emit<sp/>LE<sp/>Event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="llcp__sm__common_8c_1a12bbe680e52ca6f38b8c4a45e06460a8" kindref="member">ll_send_msg_id</ref>(link,<sp/><ref refid="link__layer_8h_1a0411cd49bb5b71852cecd93bcbf0ca2da4ebf30b2bc08e2e25deeb4e423304f39" kindref="member">LLCP_MSG_PING_TIMEOUT</ref>);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>***************************************************************************/</highlight></codeline>
<codeline lineno="1275"><highlight class="comment">/*<sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a82ef696123973169710ea7e029be17be" kindref="member">ll_ping_timeout_stop</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="1277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1adbfcbaae2237116dbbe73adc984e3a9a" kindref="member">ping_timeout</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_timer_remove(link-&gt;<ref refid="structle__link_1adbfcbaae2237116dbbe73adc984e3a9a" kindref="member">ping_timeout</ref>);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1adbfcbaae2237116dbbe73adc984e3a9a" kindref="member">ping_timeout</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>***************************************************************************/</highlight></codeline>
<codeline lineno="1290"><highlight class="comment">/*<sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a5ef4029dea4681c5a19c30c0b7ef71d5" kindref="member">ll_ping_timeout_start</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="1292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1adbfcbaae2237116dbbe73adc984e3a9a" kindref="member">ping_timeout</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;repeat<sp/>Reg_Timeout&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//trace<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a82ef696123973169710ea7e029be17be" kindref="member">ll_ping_timeout_stop</ref>(link);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1adbfcbaae2237116dbbe73adc984e3a9a" kindref="member">ping_timeout</ref><sp/>=<sp/>sys_timer_register(link-&gt;<ref refid="structle__link_1a76973c395d239899ceebed57430aee68" kindref="member">ping_timeout_ms</ref>,<sp/><ref refid="link__layer_8c_1a7c3f59306e63dba2cfa47003cdfc843a" kindref="member">ll_ping_timeout_callback</ref>);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(link-&gt;<ref refid="structle__link_1adbfcbaae2237116dbbe73adc984e3a9a" kindref="member">ping_timeout</ref>);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>sys_timer_set_context(link-&gt;<ref refid="structle__link_1adbfcbaae2237116dbbe73adc984e3a9a" kindref="member">ping_timeout</ref>,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)link);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>u8<sp/><ref refid="link__layer_8c_1a8cb2783a4eef61ae2a6f050194f18fe7" kindref="member">ll_vendor_set_latency_hold</ref>(u16<sp/>*param)</highlight></codeline>
<codeline lineno="1309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;ll_hold_latency_cnt:handle<sp/>%x,hold<sp/>%x\n&quot;</highlight><highlight class="normal">,<sp/>param[0],<sp/>param[1]);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="link__layer_8c_1ad0cf3cf97fdaf769c891098d100efedc" kindref="member">ll_link_for_handle</ref>(param[0]);</highlight><highlight class="comment">//handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNKNOWN_CONNECTION_IDENTIFIER;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>__ble_ops-&gt;ioctrl(link-&gt;<ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref>,<sp/>BLE_SET_LATENCY_HOLD,<sp/>param[1]);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="1325"><highlight class="normal">u8<sp/><ref refid="link__layer_8c_1a022c18655b36b96303b13e0df798933d" kindref="member">ll_push_control_data</ref>(u16<sp/>opcode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*param)</highlight></codeline>
<codeline lineno="1326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight><highlight class="comment">//emit<sp/>le<sp/>meta<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a3e8d169dd992baeb74857e816f4ce105" kindref="member">ll_rx_post_handler</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="1334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>LE_ROLES_IS_SUPPORT_OPTIMIZE((LE_MASTER<sp/>|<sp/>LE_SLAVE));</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8h_1ae10f97c34c30ab4d52daa0108608dd2b" kindref="member">ROLE_IS_SLAVE</ref>(link))<sp/>{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__slave_8c_1a4d892bec22bedd11795dfc4c21510e28" kindref="member">conn_slave_rx_post_handler</ref>(link);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__master_8c_1a5d4189a92e85cc8cf15a529442adbf33" kindref="member">conn_master_rx_post_handler</ref>(link);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1aa3779bab47c2c75c690198c778735b0e" kindref="member">ll_event_post_handler</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="1346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>LE_ROLES_IS_SUPPORT_OPTIMIZE((LE_MASTER<sp/>|<sp/>LE_SLAVE));</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a102aa95dcc3de53747dafba253d5e2c9" kindref="member">__event_oneshot_post_run</ref>(link,<sp/>link-&gt;<ref refid="structle__link_1ab536d4abf9812e1363ff90ae8b96d91a" kindref="member">event_cnt</ref>);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a51fb04c98eafa0f433326affc9740c48" kindref="member">tx_ctrl_pdu_handler</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="1355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>ack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="llcp__sm__common_8c_1a12bbe680e52ca6f38b8c4a45e06460a8" kindref="member">ll_send_msg_id</ref>(link,<sp/><ref refid="link__layer_8h_1a0411cd49bb5b71852cecd93bcbf0ca2dad1bfc04fcf0a2dd1008b9da0967272fc" kindref="member">LLCP_MSG_SEND_DATA</ref>);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a655af57ce4c755d9736c0b172572d6b2" kindref="member">ll_tx_post_handler</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link)</highlight></codeline>
<codeline lineno="1364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>LE_ROLES_IS_SUPPORT_OPTIMIZE((LE_MASTER<sp/>|<sp/>LE_SLAVE));</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>sent_acl_num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(atomic_read(&amp;link-&gt;<ref refid="structle__link_1a37bcf7d359f060c690eab6669d58a2f4" kindref="member">air_sent_acl_u_num</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list_empty(&amp;link-&gt;<ref refid="structle__link_1a7f819d0d18a748b355c9277d2bb0f226" kindref="member">acl_packet_head</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;&amp;&apos;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;u&apos;);put_u8hex(atomic_read(&amp;link-&gt;air_sent_acl_u_num));<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_dec(&amp;link-&gt;<ref refid="structle__link_1a37bcf7d359f060c690eab6669d58a2f4" kindref="member">air_sent_acl_u_num</ref>);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent_acl_num<sp/>+=<sp/><ref refid="link__layer_8c_1aa5d0868ff3a3bbcc494d91ee7e589639" kindref="member">ll_sent_acl_packet</ref>(link);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sent_acl_num)<sp/>{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__events_8c_1a9f707dd8febc0433d81d5a45a4ce75a1" kindref="member">hci_event_number_of_completed_packets</ref>(link,<sp/>sent_acl_num);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(atomic_read(&amp;link-&gt;<ref refid="structle__link_1a5600a094ae0648be6a67ed72eeb27c9d" kindref="member">air_sent_acl_c_num</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;c&apos;);put_u8hex(atomic_read(&amp;link-&gt;air_sent_acl_c_num));<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_dec(&amp;link-&gt;<ref refid="structle__link_1a5600a094ae0648be6a67ed72eeb27c9d" kindref="member">air_sent_acl_c_num</ref>);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a51fb04c98eafa0f433326affc9740c48" kindref="member">tx_ctrl_pdu_handler</ref>(link);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><ref refid="link__layer_8c_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1af5e4ac77575bf70aae9293b0c2925f61" kindref="member">ll_thread_resume</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>thread_resume(&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;thread);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight><highlight class="comment">//Bottom<sp/>upload<sp/>from<sp/>Baseband<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1adff7ebbc5d9f74b20f660d347c652ed1" kindref="member">conn_rx_probe_handler</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*priv,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>ble_rx<sp/>*rx)</highlight></codeline>
<codeline lineno="1398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*)priv;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1a3d4a7395fc00c95d0f8edebb98d87721" kindref="member">state</ref><sp/>==<sp/><ref refid="link__layer_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a921891dd756e7e92fb4f8c7b353f8726" kindref="member">LL_CONNECTION_ESTABLISHED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;#&apos;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1a3d4a7395fc00c95d0f8edebb98d87721" kindref="member">state</ref><sp/>==<sp/><ref refid="link__layer_8h_1ac36f475ca5b446f4fde4c9b90bec77c8ad94641dceaa42b8c9d91d2231c06b76c" kindref="member">LL_CONNECTION_CREATE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;%&apos;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1a3d4a7395fc00c95d0f8edebb98d87721" kindref="member">state</ref><sp/>=<sp/><ref refid="link__layer_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a921891dd756e7e92fb4f8c7b353f8726" kindref="member">LL_CONNECTION_ESTABLISHED</ref>;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ad41ff702f5538e858361fe2e76c36059" kindref="member">__event_oneshot_post_remove</ref>(link,<sp/><ref refid="link__layer_8c_1a19ed6a89fc0ead9855b405690d215d41" kindref="member">ll_conn_fast_supervision_timer_handler</ref>,<sp/>6);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a9345e7dd477b91bf5c71013f23bd008f" kindref="member">__rx_oneshot_add</ref>(link,<sp/><ref refid="link__layer_8c_1a5022824bdb10dd91b935cf5b7698d3f5" kindref="member">ll_set_conn_winsize</ref>);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1aa519abe78aba7f3ce911e32a6aa97507" kindref="member">ll_supervision_timeout_reset</ref>(link);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1aee76af51844a6001f3fd0adef4d81747" kindref="member">__rx_oneshot_run</ref>(link);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RX_IS_VALID(rx))<sp/>{</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structle__link_1a1a01a8d39083ca3ab21dd4e2dc1a6d09" kindref="member">rssi</ref><sp/>=<sp/>rx-&gt;rssi;</highlight><highlight class="comment">//update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__afh_8c_1ac1bcacaf9d045509ad21553ec0da301c" kindref="member">conn_rx_probe_channel_handler</ref>(link,<sp/>rx);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//empty<sp/>packet<sp/>not<sp/>notify<sp/>upper<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RX_PACKET_IS_VALID(rx))<sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//resume<sp/>ll<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sys_resume();<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;Rx&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_resume(&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;thread);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1af5f313d803ff38464dc8d83a6133e6fa" kindref="member">conn_tx_probe_handler</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*priv,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>ble_tx<sp/>*tx)</highlight></codeline>
<codeline lineno="1430"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*conn_link<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*)priv;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(tx-&gt;llid)<sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LL_RESERVED:</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LL_DATA_PDU_START:</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LL_DATA_PDU_CONTINUE:</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_inc(&amp;conn_link-&gt;<ref refid="structle__link_1a37bcf7d359f060c690eab6669d58a2f4" kindref="member">air_sent_acl_u_num</ref>);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;&gt;&apos;);put_u8hex(atomic_read(&amp;link-&gt;air_sent_acl_u_num));<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LL_CONTROL_PDU:</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_inc(&amp;conn_link-&gt;<ref refid="structle__link_1a5600a094ae0648be6a67ed72eeb27c9d" kindref="member">air_sent_acl_c_num</ref>);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>putchar(&apos;C&apos;);put_u8hex(atomic_read(&amp;conn_link-&gt;air_sent_acl_u_num));<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;Tx&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>thread_resume(&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;thread);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a5f6320d52605be6a3a0148af3ebd9ec5" kindref="member">conn_evt_probe_evtcount_handler</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>event)</highlight></codeline>
<codeline lineno="1451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1aa6805e344f717f14f35bc3c8c7e46596" kindref="member">__event_oneshot_run</ref>(link,<sp/>event);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8c_1adc37fd02d4c2279b94b9ea211355dc46" kindref="member">__event_oneshot_post_query</ref>(link,<sp/>event)<sp/>==<sp/>TRUE)<sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//some<sp/>post<sp/>handler<sp/>need<sp/>to<sp/>by<sp/>run<sp/>in<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;Post<sp/>-<sp/>Instant<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>event);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_resume(&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;thread);</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ab56c4771d56c7d7203a6cc2320eeb59f" kindref="member">conn_evt_probe_handler</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*priv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>param)</highlight></codeline>
<codeline lineno="1462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*)priv;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TYPE_EVENT_COUNT<sp/>==<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a5f6320d52605be6a3a0148af3ebd9ec5" kindref="member">conn_evt_probe_evtcount_handler</ref>(link,<sp/>param);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TYPE_EVENT_CHANNEL<sp/>==<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__afh_8c_1a5005e394524f3252061f4a7749e736b9" kindref="member">conn_evt_probe_evtchannel_handler</ref>(link,<sp/>param);</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ble_handler<sp/><ref refid="link__layer_8c_1a6acb3ca6c474d2b4d1ec01ec741812cc" kindref="member">conn_handler</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>.rx_probe_handler<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="link__layer_8c_1adff7ebbc5d9f74b20f660d347c652ed1" kindref="member">conn_rx_probe_handler</ref>,</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>.tx_probe_handler<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="link__layer_8c_1af5f313d803ff38464dc8d83a6133e6fa" kindref="member">conn_tx_probe_handler</ref>,</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>.event_probe_handler<sp/><sp/><sp/><sp/>=<sp/><ref refid="link__layer_8c_1ab56c4771d56c7d7203a6cc2320eeb59f" kindref="member">conn_evt_probe_handler</ref>,</highlight></codeline>
<codeline lineno="1476"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1abfb0519e23e6362551a226c553d0527f" kindref="member">ll_thread_process</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>thread<sp/>*th)</highlight></codeline>
<codeline lineno="1479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,<sp/>*n;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//default<sp/>sleep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>empty<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>link_empty;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_debug(&quot;&gt;&gt;&gt;&gt;Resume&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//le<sp/>meta<sp/>event<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a42594a7a51e289fd061d0a7ba63fcb46" kindref="member">le_meta_event_upload</ref>();</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_LL_MSG_ENABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*LL<sp/>message<sp/>process*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__msg_8c_1a69c3c604fa9bab8aae7995dcc41f2e41" kindref="member">ll_msg_process</ref>(th);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>ll_post_callback_t<sp/>*p,<sp/>*n;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(p,<sp/>n,<sp/>&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;post_callback_head,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;callback)<sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;callback();</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ADV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>empty<sp/>&amp;=<sp/><ref refid="ll__adv_8c_1a6bc19727c724f5bd429bd5f9421b7e95" kindref="member">adv_rx_post_handler</ref>();</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Scan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>empty<sp/>&amp;=<sp/><ref refid="ll__scan_8c_1a5db072beb363f0e855bb45b9b854a3e3" kindref="member">scan_rx_post_handler</ref>();</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>empty<sp/>&amp;=<sp/><ref refid="ll__init_8c_1aaca643e0ffd0dcab27df48bae5ff6e8c" kindref="member">init_rx_post_handler</ref>();</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Process<sp/>traffic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(link,<sp/>n,<sp/>&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;le_links,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a655af57ce4c755d9736c0b172572d6b2" kindref="member">ll_tx_post_handler</ref>(link);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//RX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a3e8d169dd992baeb74857e816f4ce105" kindref="member">ll_rx_post_handler</ref>(link);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//EVT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1aa3779bab47c2c75c690198c778735b0e" kindref="member">ll_event_post_handler</ref>(link);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//State</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structle__link_1a3d4a7395fc00c95d0f8edebb98d87721" kindref="member">state</ref><sp/>==<sp/><ref refid="link__layer_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a1499826c883cd78d147a1b3b5620dc7c" kindref="member">LL_DISCONNECT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_error(</highlight><highlight class="stringliteral">&quot;thread<sp/>LL_DISCONNECT<sp/>:<sp/>handle<sp/>0x%x&quot;</highlight><highlight class="normal">,<sp/>link-&gt;<ref refid="structle__link_1a6843fe2a32b8f30d12019f50f0363a91" kindref="member">handle</ref>);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a33c1e91118feac64f1143195e30be576" kindref="member">ll_delete_link</ref>(link);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__hci_send_event(HCI_EVENT_VENDOR_REMOTE_TEST,<sp/></highlight><highlight class="stringliteral">&quot;11&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__afh_8c_1a12ab4e73484b34534907707fbac70c98" kindref="member">ll_update_channel_map_post_handler</ref>(link);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Query<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ble_ops-&gt;ioctrl(link-&gt;<ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref>,<sp/>BLE_GET_RX_EMPTY,<sp/>&amp;link_empty);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_error(&quot;link-&gt;handle<sp/>%d,<sp/>%d&quot;,<sp/>link-&gt;handle,<sp/>link_empty);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>empty<sp/>&amp;=<sp/>link_empty;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BLUETOOTH_5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LE_FEATURES_IS_SUPPORT(LE_EXTENDED_ADVERTISING))<sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>empty<sp/>&amp;=<sp/><ref refid="extended__advertising_8h_1a4766875129139df9ff723b05c185f9a8" kindref="member">ll_ext_rx_post_process</ref>();</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BLUETOOTH_5P1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LE_FEATURES_IS_SUPPORT(LL_FEAT_CONNLESS_CTE_RECV))<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>empty<sp/>&amp;=<sp/><ref refid="ll__cte_8h_1aba547b1a73e0f602b77d28ab74f31d6c" kindref="member">ll_cte_rx_post_process</ref>();</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BLUETOOTH_5P2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LE_FEATURES_IS_SUPPORT(LE_FEATURES_CIS))<sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>empty<sp/>&amp;=<sp/><ref refid="ll__cis_8c_1ac92f0de91f9e7826744b8e2db68642fa" kindref="member">ll_cis_post_process</ref>();</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LE_FEATURES_IS_SUPPORT(LE_FEATURES_BIS))<sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>empty<sp/>&amp;=<sp/><ref refid="ll__bis_8c_1ab9771d38c45a4436d668377cf559875f" kindref="member">ll_bis_post_process</ref>();</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//wait<sp/>all<sp/>channel<sp/>idle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(empty<sp/>&amp;&amp;<sp/>(lbuf_empty_btctrler(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;pEVT)))<sp/>{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_debug(&quot;&lt;&lt;&lt;&lt;<sp/>Suspend&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_suspend(th,<sp/>0);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="1573"><highlight class="normal">u8<sp/><ref refid="link__layer_8c_1a1ed55c677206e7119670198573c60bc0" kindref="member">ll_read_channel_map</ref>(u8<sp/>*channel_map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*<ref refid="structoneshot_1a246d3b6525f663fdc35a89bc13c2a66f" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="1574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link<sp/>=<sp/><ref refid="link__layer_8c_1ad0cf3cf97fdaf769c891098d100efedc" kindref="member">ll_link_for_handle</ref>(READ_CONNECTION_HANDLE(data));</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ASSERT(link<sp/>!=<sp/>NULL,<sp/>&quot;%s&quot;,<sp/>__func__);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNKNOWN_CONNECTION_IDENTIFIER;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(channel_map,<sp/>link-&gt;<ref refid="structle__link_1ab37919366a48faa1b5e84c8b141cd189" kindref="member">ll_data</ref>.channel,<sp/>5);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ac6cbbcbccdc4336b6ebd9abf181d3eab" kindref="member">ll_acl_packet_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1589"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1a94df935feb9ef3a1e4e168a4149417ad" kindref="member">acl_packets_total_num</ref><sp/><sp/>=<sp/>config_btctler_le_acl_total_nums;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1a944c71c79ca15860ac3a085827c6f1c1" kindref="member">acl_data_packet_length</ref><sp/>=<sp/>config_btctler_le_acl_packet_length;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1595"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1596"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>API</highlight></codeline>
<codeline lineno="1597"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1598"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a3fdc7c4f244a8ea1901c7beda1846993" kindref="member">ll_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(power_is_poweroff_post())<sp/>{</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;ll_init<sp/>reboot<sp/>init&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;pEVT<sp/>=<sp/>lbuf_init_btctrler(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;pEvent_buf,<sp/>CONTROLLER_MAX_LE_EVENT_PAYLOAD);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_create(&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;thread,<sp/></highlight><highlight class="stringliteral">&quot;link_layer&quot;</highlight><highlight class="normal">,<sp/><ref refid="link__layer_8c_1abfb0519e23e6362551a226c553d0527f" kindref="member">ll_thread_process</ref>,<sp/>&amp;bt_task_thread);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;ll_init<sp/>normal<sp/>init&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_MALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;link<sp/>layer<sp/>malloc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref><sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlink__layer__handle" kindref="compound">link_layer_handle</ref>));</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>,<sp/>0x0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlink__layer__handle" kindref="compound">link_layer_handle</ref>));</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;LL<sp/>event<sp/>buffer<sp/>malloc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;pEvent_buf<sp/>=<sp/>malloc(CONTROLLER_MAX_LE_EVENT_PAYLOAD);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;pEvent_buf);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;pEvent_buf,<sp/>0x0,<sp/>CONTROLLER_MAX_LE_EVENT_PAYLOAD);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>,<sp/>0x0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlink__layer__handle" kindref="compound">link_layer_handle</ref>));</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;pEvent_buf<sp/>=<sp/><ref refid="link__layer_8c_1af2aa940e2aa5d8ba01063e5f4e6f44e1" kindref="member">pEvent_buf_static</ref>;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BLUETOOTH_5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="extended__advertising_8h_1a8aa242e17db807661e1e308b9f01b69d" kindref="member">ll_ext_handle_malloc</ref>();</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="multiple__phys_8h_1a7de192dcfe9580576ef623f231a4ac66" kindref="member">ll_default_phys_init</ref>();</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>BLUETOOTH_5<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;le_links);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//filter<sp/>policy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__white__list_8c_1a7622afe74c8f2aa1409f3f69acf57f3a" kindref="member">ll_white_list_init</ref>();</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//privacy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__resolve__list_8c_1acbf778419447e0c5af9fb216e9c8e6b6" kindref="member">ll_resolving_list_init</ref>();</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//feature<sp/>-<sp/>data<sp/>length<sp/>extension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__data__extension_8c_1a752f4f01fb39bbed01db4d4680b3b717" kindref="member">ll_data_extension_init</ref>();</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;pEVT<sp/>=<sp/>lbuf_init_btctrler(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;pEvent_buf,<sp/>CONTROLLER_MAX_LE_EVENT_PAYLOAD);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;pEVT);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ble_ops-&gt;init();</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_create(&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;thread,<sp/></highlight><highlight class="stringliteral">&quot;link_layer&quot;</highlight><highlight class="normal">,<sp/><ref refid="link__layer_8c_1abfb0519e23e6362551a226c553d0527f" kindref="member">ll_thread_process</ref>,<sp/>&amp;bt_task_thread);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Link<sp/>info<sp/>Sync</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1a0956cc9943558fc76bebb3df44b9321b" kindref="member">features</ref>,<sp/>(u8<sp/>*)&amp;config_btctler_le_features,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(config_btctler_le_features));</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1a6722ba31e000117c9af243356bf51b09" kindref="member">compld</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>hci_param.manufacturer_name;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1a6a35436a19c3db091a0f4561c5dce169" kindref="member">versnr</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>hci_param.hci_version;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>le_param.subversnr<sp/><sp/>=<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1ac6cbbcbccdc4336b6ebd9abf181d3eab" kindref="member">ll_acl_packet_init</ref>();</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_LL_MSG_ENABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__msg_8c_1ad8892418f3001e30a42d8544a55af4df" kindref="member">ll_msg_queue_init</ref>();</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LE_ROLES_IS_SUPPORT(LE_MASTER))<sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__master_8c_1a38ff43183b35ee429b07e784882b408a" kindref="member">ll_master_init</ref>();</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LE_ROLES_IS_SUPPORT(LE_SLAVE))<sp/>{</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__slave_8c_1ad38dcfa616c59a729a33ef2484595f4f" kindref="member">ll_slave_init</ref>();</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BLUETOOTH_5P2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__ext__adv_8h_1a0090bd78c1b6f5777f6413ab8cc7b951" kindref="member">ll_acad_init</ref>();</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ll__common__iso_8c_1aef585efcb3745391e704ecf47fab8b3e" kindref="member">ll_iso_init</ref>();</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><ref refid="link__layer_8c_1aeb3cf46e5bcf4641fdd900483a391889" kindref="member">AT_BLE_LL_CODE</ref></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a2a9c0c14ed733611247ef69e783c671b" kindref="member">ll_destroy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1683"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structle__link" kindref="compound">le_link</ref><sp/>*link,<sp/>*n;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(power_is_poweroff_post())<sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CONFIG_LL_MSG_ENABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__msg_8c_1ab1635339315ba94658393259b6607dd2" kindref="member">ll_msg_queue_destory</ref>();</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Adv<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__adv_8c_1ade113f482e2a470d1c732e11753d21ab" kindref="member">ll_adv_close</ref>();</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Scan<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__scan_8c_1a0edf22625f29053516ed828e1247f059" kindref="member">ll_scan_destroy</ref>();</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Init<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__init_8c_1a3b001c687c4393c4cea5c5e26b426895" kindref="member">ll_init_close</ref>();</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//delete<sp/>exist<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;number)<sp/>{</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Conn<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_for_each_entry_safe(link,<sp/>n,<sp/>&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;le_links,<sp/><ref refid="structoneshot_1a6bb9813015027067bf979373aff27a7d" kindref="member">entry</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;ll_destory<sp/>handle<sp/>:<sp/>%x&quot;</highlight><highlight class="normal">,<sp/>link-&gt;<ref refid="structle__link_1a6843fe2a32b8f30d12019f50f0363a91" kindref="member">handle</ref>);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a33c1e91118feac64f1143195e30be576" kindref="member">ll_delete_link</ref>(link);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BLUETOOTH_5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="extended__advertising_8h_1a8bad073b914562f1c3008f3b6abc9c3e" kindref="member">ll_ext_destroy</ref>();</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BLUETOOTH_5P2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ll__common__iso_8c_1aa9927ae58774746ed7e9e2cb6278c53c" kindref="member">ll_iso_destroy</ref>();</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//delete<sp/>link<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;thread.fun)<sp/>{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_delete(&amp;<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;thread);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//delete<sp/>le<sp/>baseband</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>__ble_ops-&gt;destroy();</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//log_error(&quot;__this-&gt;pEVT:%x\n&quot;,__this-&gt;pEVT);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;pEVT)<sp/>{</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lbuf_clear_btctrler(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;pEVT);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_MALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;LL<sp/>event<sp/>buffer<sp/>free&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/>free(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>-&gt;pEvent_buf);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;link<sp/>layer<sp/>free&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/>free(<ref refid="link__layer_8c_1ad223350d80db21fa8b721107cd1f6442" kindref="member">__this</ref>);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ae7477dec64dd05f8e8792bed690900d2" kindref="member">ll_reset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1739"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a2a9c0c14ed733611247ef69e783c671b" kindref="member">ll_destroy</ref>();</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1a3fdc7c4f244a8ea1901c7beda1846993" kindref="member">ll_init</ref>();</highlight></codeline>
<codeline lineno="1743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1afec91aee56468334375d1391a5a8a484" kindref="member">__set_ll_local_addr_common</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>le_addr<sp/>*addr,<sp/>u8<sp/>own_addr_type)</highlight></codeline>
<codeline lineno="1746"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>addr-&gt;addr_type<sp/>=<sp/>own_addr_type;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(own_addr_type)<sp/>{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(addr-&gt;addr,<sp/><ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1a477178f513d2c4df134d2b4e88b132fd" kindref="member">public_address</ref>,<sp/>BTCTLER_BD_ADDR_LEN);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;LE<sp/>public<sp/>addr<sp/>:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info_hexdump(addr-&gt;addr,<sp/>BTCTLER_BD_ADDR_LEN);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(addr-&gt;addr,<sp/><ref refid="hci__ll__cmds_8c_1a58e8c0445052dfd3f02f1dccdd04267f" kindref="member">le_param</ref>.<ref refid="structle__parameter_1a8af2272608273289c68ab91c51ee5ab9" kindref="member">random_address</ref>,<sp/>BTCTLER_BD_ADDR_LEN);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;LE<sp/>random<sp/>addr<sp/>:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_info_hexdump(addr-&gt;addr,<sp/>BTCTLER_BD_ADDR_LEN);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1adfe227fcb9e3cd5517eb4074f28168fe" kindref="member">__set_ll_local_addr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref>,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>le_addr<sp/>*addr,<sp/>u8<sp/>own_addr_type)</highlight></codeline>
<codeline lineno="1766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="link__layer_8c_1afec91aee56468334375d1391a5a8a484" kindref="member">__set_ll_local_addr_common</ref>(addr,<sp/>own_addr_type);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>__ble_ops-&gt;ioctrl(<ref refid="structle__link_1aa5f51601aa9fec985c79140bbc6cc139" kindref="member">hw</ref>,<sp/>\</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLE_SET_LOCAL_ADDR,<sp/>\</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;addr_type,<sp/>\</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr-&gt;addr);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ble_conn_param<sp/><ref refid="link__layer_8c_1a6c1bee17cae2c6493a7048cfc0955160" kindref="member">sample_conn_param</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/>.aa<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0x8e,<sp/>0x89,<sp/>0xbe,<sp/>0xd6},</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>.crcinit<sp/><sp/><sp/><sp/>=<sp/>{0xae,<sp/>0x83,<sp/>0x19},</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/>.winsize<sp/><sp/><sp/><sp/>=<sp/>0x2,</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>.winoffset<sp/><sp/>=<sp/>0x0000,</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>.interval<sp/><sp/><sp/>=<sp/>0x0027,</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>.latency<sp/><sp/><sp/><sp/>=<sp/>0x0000,</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/>.timeout<sp/><sp/><sp/><sp/>=<sp/>0x0032,</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>.channel<sp/><sp/><sp/><sp/>=<sp/>{0xff,<sp/>0xff,<sp/>0xff,<sp/>0xff,<sp/>0x1f},</highlight></codeline>
<codeline lineno="1784"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a1afd59c7711234a481880a609b1262d9" kindref="member">check_consecutive_zeros</ref>(u8<sp/>*pbuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="1787"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zeros<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>consecutive_zeros<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>len;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;zeros<sp/>:<sp/>%x&quot;,<sp/>pbuf[j]);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pbuf[j]<sp/>&amp;<sp/>BIT(i))<sp/>{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>consecutive_zeros<sp/>=<sp/>(zeros<sp/>&gt;<sp/>consecutive_zeros)<sp/>?<sp/>zeros<sp/>:<sp/>consecutive_zeros;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zeros<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;+consecutive_zeros<sp/>:<sp/>%d&quot;,<sp/>consecutive_zeros);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zeros++;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;0&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;&gt;consecutive_zeros<sp/>:<sp/>%d&quot;,<sp/>consecutive_zeros);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>consecutive_zeros;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a809ebd9e3bfbcc5667e509e21567110a" kindref="member">check_zeros</ref>(u8<sp/>*pbuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="1811"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zeros<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>len;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(pbuf[j]<sp/>&amp;<sp/>BIT(i)))<sp/>{</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zeros++;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;&gt;zeros<sp/>:<sp/>%d&quot;,<sp/>zeros);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>zeros;</highlight></codeline>
<codeline lineno="1825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ac9bc7e121d884aad5c7f4fdad4d67599" kindref="member">check_consecutive_ones</ref>(u8<sp/>*pbuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="1828"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ones<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>consecutive_ones<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>len;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;ones<sp/>:<sp/>%x&quot;,<sp/>pbuf[j]);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pbuf[j]<sp/>&amp;<sp/>BIT(i))<sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ones++;</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;1&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>consecutive_ones<sp/>=<sp/>(ones<sp/>&gt;<sp/>consecutive_ones)<sp/>?<sp/>ones<sp/>:<sp/>consecutive_ones;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ones<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;+consecutive_ones<sp/>:<sp/>%d&quot;,<sp/>consecutive_ones);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;&gt;consecutive_ones<sp/>:<sp/>%d&quot;,<sp/>consecutive_ones);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>consecutive_ones;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ac6f8ffeccc795f4fe41a261d75095254" kindref="member">check_ones</ref>(u8<sp/>*pbuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="1852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ones<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>len;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pbuf[j]<sp/>&amp;<sp/>BIT(i))<sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ones++;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;&gt;ones<sp/>:<sp/>%d&quot;,<sp/>ones);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ones;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ab479a5c824846c9744959103738ce580" kindref="member">check_differs</ref>(u8<sp/>*buf1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u8<sp/>*buf2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="1869"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>i;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>res;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;&lt;differs<sp/>:&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf1[i]<sp/>^=<sp/>buf2[i];</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info_hexdump(buf1,<sp/>len);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ac6f8ffeccc795f4fe41a261d75095254" kindref="member">check_ones</ref>(buf1,<sp/>len);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1abfd9689e041b6d63aa6e36dbf60108fb" kindref="member">check_equal</ref>(u8<sp/>*pbuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="1883"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>i;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>res<sp/>=<sp/>pbuf[0];</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>^=<sp/>pbuf[i];</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;&gt;equal<sp/>:<sp/>%d&quot;,<sp/>res);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ab1621b3030576278c502827f434f4623" kindref="member">check_transitions_bits</ref>(u8<sp/>*pbuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="1896"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>last_bit;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>cur_bit;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>transitions<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/>last_bit<sp/>=<sp/>pbuf[0]<sp/>&amp;<sp/>BIT(0);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur_bit<sp/>=<sp/>(pbuf[i<sp/>/<sp/>8]<sp/>&amp;<sp/>BIT(i<sp/>%<sp/>8))<sp/>&gt;&gt;<sp/>(i<sp/>%<sp/>8);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;bit<sp/>:<sp/>%d<sp/>-<sp/>%d&quot;,<sp/>i,<sp/>cur_bit);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_bit<sp/>!=<sp/>cur_bit)<sp/>{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transitions++;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_bit<sp/>=<sp/>cur_bit;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;&gt;transitions<sp/>:<sp/>%d&quot;,<sp/>transitions);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transitions;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1aa7e34c5918c54b69d22be3f33d4b6059" kindref="member">check_exist</ref>(u8<sp/>*pbuf)</highlight></codeline>
<codeline lineno="1918"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*-TODO-*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight><highlight class="comment">//MSB-&gt;LSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal">u8<sp/><ref refid="link__layer_8c_1a56db5141b814e98cc06755e0deefb7a8" kindref="member">verify</ref>[]<sp/>=<sp/>{0x3B,<sp/>0x9A,<sp/>0x63,<sp/>0xFD};</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1aa3a9a9bb60da5fb4ae80f1ea789bf137" kindref="member">trace_aa</ref>(u8<sp/>*aa)</highlight></codeline>
<codeline lineno="1928"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/>btctler_reverse_32(<ref refid="link__layer_8c_1a56db5141b814e98cc06755e0deefb7a8" kindref="member">verify</ref>,<sp/>aa);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight><highlight class="comment">//LSB<sp/>-&gt;<sp/>MSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a3a2400b844a72da830a66dc84f77b865" kindref="member">access_addr_generate</ref>(u8<sp/>*aa)</highlight></codeline>
<codeline lineno="1934"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pseudo_random_genrate(aa,<sp/>4);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;Acess<sp/>Address<sp/>:<sp/>&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>trace_aa(aa);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info_hexdump(aa,<sp/>4);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>memcpy(aa,<sp/>verify,<sp/>4);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;Acess<sp/>Address<sp/>:<sp/>&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info_hexdump(aa,<sp/>4);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>•<sp/>It<sp/>shall<sp/>not<sp/>be<sp/>the<sp/>Access<sp/>Address<sp/>for<sp/>any<sp/>existing<sp/>Link<sp/>Layer<sp/>connection<sp/>on<sp/>this<sp/>device.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>(check_exist(pbuf))<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>continue;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>•<sp/>It<sp/>shall<sp/>not<sp/>be<sp/>the<sp/>Access<sp/>Address<sp/>for<sp/>any<sp/>enabled<sp/>periodic<sp/>advertising.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>•<sp/>It<sp/>shall<sp/>have<sp/>no<sp/>more<sp/>than<sp/>six<sp/>consecutive<sp/>zeros<sp/>or<sp/>ones.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8c_1a1afd59c7711234a481880a609b1262d9" kindref="member">check_consecutive_zeros</ref>(aa,<sp/>4)<sp/>&gt;<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_error(&quot;It<sp/>shall<sp/>have<sp/>no<sp/>more<sp/>than<sp/>six<sp/>consecutive<sp/>zeros<sp/>.&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8c_1ac9bc7e121d884aad5c7f4fdad4d67599" kindref="member">check_consecutive_ones</ref>(aa,<sp/>4)<sp/>&gt;<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_error(&quot;It<sp/>shall<sp/>have<sp/>no<sp/>more<sp/>than<sp/>six<sp/>consecutive<sp/>ones.&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>•<sp/>It<sp/>shall<sp/>not<sp/>be<sp/>the<sp/>advertising<sp/>channel<sp/>packets’<sp/>Access<sp/>Address.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memcmp(aa,<sp/><ref refid="link__layer_8c_1a6c1bee17cae2c6493a7048cfc0955160" kindref="member">sample_conn_param</ref>.aa,<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_error(&quot;It<sp/>shall<sp/>not<sp/>be<sp/>the<sp/>advertising<sp/>channel<sp/>packets’<sp/>Access<sp/>Address.&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>•<sp/>It<sp/>shall<sp/>not<sp/>be<sp/>a<sp/>sequence<sp/>that<sp/>differs<sp/>from<sp/>the<sp/>advertising<sp/>channel<sp/>packets’<sp/>Access<sp/>Address<sp/>by<sp/>only<sp/>one<sp/>bit.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>memcpy(aa,<sp/>sample_conn_param.aa,<sp/>6);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>aa[0]<sp/>^=<sp/>BIT(0)|BIT(1);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8c_1ab479a5c824846c9744959103738ce580" kindref="member">check_differs</ref>(aa,<sp/><ref refid="link__layer_8c_1a6c1bee17cae2c6493a7048cfc0955160" kindref="member">sample_conn_param</ref>.aa,<sp/>4)<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_error(&quot;It<sp/>shall<sp/>not<sp/>be<sp/>a<sp/>sequence<sp/>that<sp/>differs<sp/>from<sp/>the<sp/>advertising<sp/>channel<sp/>packets’<sp/>Access<sp/>Address<sp/>by<sp/>only<sp/>one<sp/>bit.&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>•<sp/>It<sp/>shall<sp/>not<sp/>have<sp/>all<sp/>four<sp/>octets<sp/>equal.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8c_1abfd9689e041b6d63aa6e36dbf60108fb" kindref="member">check_equal</ref>(aa,<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_error(&quot;It<sp/>shall<sp/>not<sp/>have<sp/>all<sp/>four<sp/>octets<sp/>equal.&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>•<sp/>It<sp/>shall<sp/>have<sp/>no<sp/>more<sp/>than<sp/>24<sp/>transitions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8c_1ab1621b3030576278c502827f434f4623" kindref="member">check_transitions_bits</ref>(aa,<sp/>4<sp/>*<sp/>8)<sp/>&gt;<sp/>24)<sp/>{</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_error(&quot;It<sp/>shall<sp/>have<sp/>no<sp/>more<sp/>than<sp/>24<sp/>transitions.&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>•<sp/>It<sp/>shall<sp/>have<sp/>a<sp/>minimum<sp/>of<sp/>two<sp/>transitions<sp/>in<sp/>the<sp/>most<sp/>significant<sp/>six<sp/>bits.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="link__layer_8c_1ab1621b3030576278c502827f434f4623" kindref="member">check_transitions_bits</ref>(aa<sp/>+<sp/>3,<sp/>6)<sp/>&lt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_error(&quot;It<sp/>shall<sp/>have<sp/>a<sp/>minimum<sp/>of<sp/>two<sp/>transitions<sp/>in<sp/>the<sp/>most<sp/>significant<sp/>six<sp/>bits.&quot;);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight></codeline>
<codeline lineno="1996"><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal">uint32_t<sp/><ref refid="link__layer_8c_1a3d6f3dcc715eb8b6beadbc5df7c3d1a1" kindref="member">lctrComputeAccessAddr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1998"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>accessAddr;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/>pseudo_random_genrate(&amp;accessAddr,<sp/>4);</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2004"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>following<sp/>code<sp/>enforces<sp/>a<sp/>pattern<sp/>to<sp/>make<sp/>sure<sp/>the<sp/>address<sp/>meets<sp/>all<sp/>requirements</highlight></codeline>
<codeline lineno="2005"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(including<sp/>requirements<sp/>for<sp/>the<sp/>LE<sp/>coded<sp/>PHY).<sp/><sp/>The<sp/>pattern<sp/>is</highlight></codeline>
<codeline lineno="2006"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="2007"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>0byyyyyy1x<sp/>0xxxx1x0<sp/>xxxx1x0x<sp/>xx11x0x1</highlight></codeline>
<codeline lineno="2008"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="2009"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>with<sp/>2^5<sp/>choices<sp/>for<sp/>the<sp/>upper<sp/>six<sp/>bits.<sp/><sp/>This<sp/>provides<sp/>2^5<sp/>*<sp/>2^16<sp/>=<sp/>2097152<sp/>variations.</highlight></codeline>
<codeline lineno="2010"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Patterns<sp/>for<sp/>upper<sp/>six<sp/>bits.<sp/><sp/>The<sp/>lower<sp/>row<sp/>contains<sp/>complemented<sp/>values<sp/>of<sp/>the<sp/>upper<sp/>row.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>upperSixBits[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>000010<sp/>000100<sp/>000101<sp/>000110<sp/>001000<sp/>001100<sp/>001101<sp/>001110<sp/>010000<sp/>010001<sp/>010011<sp/>010111<sp/>010110<sp/>011000<sp/>011100<sp/>011110<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x08,<sp/><sp/>0x10,<sp/><sp/>0x14,<sp/><sp/>0x18,<sp/><sp/>0x20,<sp/><sp/>0x30,<sp/><sp/>0x34,<sp/><sp/>0x38,<sp/><sp/>0x40,<sp/><sp/>0x44,<sp/><sp/>0x4C,<sp/><sp/>0x5C,<sp/><sp/>0x58,<sp/><sp/>0x60,<sp/><sp/>0x70,<sp/><sp/>0x78,</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>111101<sp/>111011<sp/>111010<sp/>111001<sp/>110111<sp/>110011<sp/>110010<sp/>110001<sp/>101111<sp/>101110<sp/>101100<sp/>101000<sp/>101001<sp/>100111<sp/>100011<sp/>100001<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xF4,<sp/><sp/>0xEC,<sp/><sp/>0xE8,<sp/><sp/>0xE4,<sp/><sp/>0xDC,<sp/><sp/>0xCC,<sp/><sp/>0xC8,<sp/><sp/>0xC4,<sp/><sp/>0xBC,<sp/><sp/>0xB8,<sp/><sp/>0xB0,<sp/><sp/>0xA0,<sp/><sp/>0xA4,<sp/><sp/>0x9C,<sp/><sp/>0x8C,<sp/><sp/>0x84</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>upper<sp/>six<sp/>bits.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>accessAddr<sp/><sp/>=<sp/>(accessAddr<sp/>&amp;<sp/>~0xFC000000)<sp/>|<sp/>(upperSixBits[accessAddr<sp/>&gt;&gt;<sp/>27]<sp/>&lt;&lt;<sp/>24);</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/><sp/><sp/>ones<sp/><sp/>with<sp/>the<sp/>mask<sp/>0b00000010<sp/>00000100<sp/>00001000<sp/>00110001<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/>accessAddr<sp/>|=<sp/><sp/>0x02040831;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>zeros<sp/>with<sp/>the<sp/>mask<sp/>0b00000000<sp/>10000001<sp/>00000010<sp/>00000100<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/>accessAddr<sp/>&amp;=<sp/>~0x00810204;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>accessAddr;</highlight></codeline>
<codeline lineno="2030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight></codeline>
<codeline lineno="2038"><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal">uint32_t<sp/><ref refid="link__layer_8c_1a5e5b2b2c35ca28499c085ef59f547202" kindref="member">lctrComputeSeedAccessAddr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2040"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>accessAddr;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/>pseudo_random_genrate(&amp;accessAddr,<sp/>4);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2046"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>following<sp/>code<sp/>enforces<sp/>a<sp/>pattern<sp/>to<sp/>make<sp/>sure<sp/>the<sp/>address<sp/>meets<sp/>all<sp/>requirements.</highlight></codeline>
<codeline lineno="2047"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>pattern<sp/>is<sp/>either<sp/>the<sp/>first<sp/>one<sp/>or<sp/>the<sp/>second<sp/>one</highlight></codeline>
<codeline lineno="2048"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="2049"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>0bxxxxxx0x<sp/>1yyyyyyy<sp/>yxxxxxxx<sp/>xxxxxxxx</highlight></codeline>
<codeline lineno="2050"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="2051"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>with<sp/>2^5<sp/>choices<sp/>for<sp/>the<sp/>middle<sp/>8<sp/>bits(indicated<sp/>by<sp/>y).<sp/><sp/>This<sp/>provides<sp/>2^5<sp/>*<sp/>2^<sp/>(21<sp/>-<sp/>4(z))<sp/>=<sp/>2<sp/>^<sp/>22<sp/>=<sp/>4194304<sp/>variations.</highlight></codeline>
<codeline lineno="2052"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Z<sp/>depends<sp/>LL_MAX_BIS,<sp/>6<sp/>BISs<sp/>require<sp/>4<sp/>bits<sp/>or<sp/>16<sp/>combination<sp/>to<sp/>assure<sp/>at<sp/>least<sp/>two<sp/>bits<sp/>are<sp/>different.</highlight></codeline>
<codeline lineno="2053"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Patterns<sp/>for<sp/>middle<sp/>8<sp/>bits<sp/>with<sp/>32<sp/>combinations.<sp/>The<sp/>upper<sp/>one<sp/>follows<sp/>the<sp/>1yy0yy10<sp/>and<sp/>lower<sp/>one<sp/>follows<sp/>the<sp/>0yy1yy01<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>upperSixBits[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>10000010<sp/>10000110<sp/><sp/>10001010<sp/><sp/>10001110<sp/><sp/>10100010<sp/><sp/>10100110<sp/><sp/>10101010<sp/><sp/>10101110<sp/><sp/>11000010<sp/><sp/>11000110<sp/><sp/>11001010<sp/><sp/>11001110<sp/><sp/>11100010<sp/><sp/>11100110<sp/><sp/>11101010<sp/><sp/>11101110<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x82,<sp/><sp/><sp/><sp/>0x86,<sp/><sp/><sp/><sp/><sp/>0x8A,<sp/><sp/><sp/><sp/><sp/>0x8E,<sp/><sp/><sp/><sp/><sp/>0xA2,<sp/><sp/><sp/><sp/><sp/>0xA6,<sp/><sp/><sp/><sp/><sp/>0xAA,<sp/><sp/><sp/><sp/><sp/>0xAE,<sp/><sp/><sp/><sp/><sp/>0xC2,<sp/><sp/><sp/><sp/><sp/>0xC6,<sp/><sp/><sp/><sp/><sp/>0xCA,<sp/><sp/><sp/><sp/><sp/>0xCE,<sp/><sp/><sp/><sp/><sp/>0xE2,<sp/><sp/><sp/><sp/><sp/>0xE6,<sp/><sp/><sp/><sp/><sp/>0xEA,<sp/><sp/><sp/><sp/><sp/>0xEE,</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>00010001<sp/>00010101<sp/><sp/>00011001<sp/><sp/>00011101<sp/><sp/>00110001<sp/><sp/>00110101<sp/><sp/>00111001<sp/><sp/>00111101<sp/><sp/>01010001<sp/><sp/>01010101<sp/><sp/>01011001<sp/><sp/>01011101<sp/><sp/>01110001<sp/><sp/>01110101<sp/><sp/>01111001<sp/><sp/>01111101<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x11,<sp/><sp/><sp/><sp/>0x15,<sp/><sp/><sp/><sp/><sp/>0x19,<sp/><sp/><sp/><sp/><sp/>0x1D,<sp/><sp/><sp/><sp/><sp/>0x31,<sp/><sp/><sp/><sp/><sp/>0x35,<sp/><sp/><sp/><sp/><sp/>0x39,<sp/><sp/><sp/><sp/><sp/>0x3D,<sp/><sp/><sp/><sp/><sp/>0x51,<sp/><sp/><sp/><sp/><sp/>0x55,<sp/><sp/><sp/><sp/><sp/>0x59,<sp/><sp/><sp/><sp/><sp/>0x5D,<sp/><sp/><sp/><sp/><sp/>0x71,<sp/><sp/><sp/><sp/><sp/>0x75,<sp/><sp/><sp/><sp/><sp/>0x79,<sp/><sp/><sp/><sp/><sp/>0x7D,</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>middle<sp/>8<sp/>bits.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/>accessAddr<sp/><sp/>=<sp/>(accessAddr<sp/>&amp;<sp/>~0x007F8000)<sp/>|<sp/>(upperSixBits[accessAddr<sp/>&gt;&gt;<sp/>27]<sp/>&lt;&lt;<sp/>15);</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>ones<sp/>with<sp/>the<sp/>mask<sp/>0b00000000<sp/>10000000<sp/>00000000<sp/>00000000<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/>accessAddr<sp/>|=<sp/><sp/>0x00800000;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>zeros<sp/>with<sp/>the<sp/>mask<sp/>0b00000010<sp/>00000000<sp/>00000000<sp/>00000000<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/>accessAddr<sp/>&amp;=<sp/>~0x02000000;</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TODO<sp/>add<sp/>code<sp/>to<sp/>make<sp/>sure<sp/>two<sp/>BIG<sp/>seedAccessAddress<sp/>in<sp/>the<sp/>same<sp/>device<sp/>shall<sp/>differ<sp/>in<sp/>at<sp/>least<sp/>two<sp/>bits.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/>log_info(</highlight><highlight class="stringliteral">&quot;AccessAddr<sp/>0x%x&quot;</highlight><highlight class="normal">,<sp/>accessAddr);</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>accessAddr;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************************/</highlight></codeline>
<codeline lineno="2084"><highlight class="comment">/*************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal">uint32_t<sp/><ref refid="link__layer_8c_1a0e790caf4a070feb3ae94131f49aa806" kindref="member">lctrComputeCrcInit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2086"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>crcinit;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/>pseudo_random_genrate(&amp;crcinit,<sp/>3);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>crcinit<sp/>&amp;<sp/>0xFFFFFF;<sp/><sp/></highlight></codeline>
<codeline lineno="2092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1ac6d025066f03a76928ad0b7975c61078" kindref="member">ll_set_rf_debug</ref>(u16<sp/>debug_index)</highlight></codeline>
<codeline lineno="2097"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/>__ble_ops-&gt;ioctrl(NULL,<sp/>BLE_SET_DEBUG,<sp/>debug_index);</highlight></codeline>
<codeline lineno="2099"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><ref refid="link__layer_8c_1a361c94a6cd562283f1c8405c31cec997" kindref="member">AT_BLE_LL_PROBE_CODE</ref></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="link__layer_8c_1a6665ff63058f613583d0c7235abc45a5" kindref="member">ll_slave_set_connection_param</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>ble_conn_param<sp/>*param,<sp/>u8<sp/>*<ref refid="structoneshot_1a246d3b6525f663fdc35a89bc13c2a66f" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="2103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(param-&gt;aa,<sp/>data,<sp/>4);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(param-&gt;crcinit,<sp/>data<sp/>+<sp/>4,<sp/>3);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/>param-&gt;winsize<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>data[7];</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/>param-&gt;winoffset<sp/><sp/><sp/><sp/>=<sp/>btctler_little_endian_read_16(data,<sp/>8);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/>param-&gt;interval<sp/><sp/><sp/><sp/><sp/>=<sp/>btctler_little_endian_read_16(data,<sp/>10);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>param-&gt;latency<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>btctler_little_endian_read_16(data,<sp/>12);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/>param-&gt;timeout<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>btctler_little_endian_read_16(data,<sp/>14);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(param-&gt;channel,<sp/>data<sp/>+<sp/>16,<sp/>5);</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>param-&gt;hop<sp/>=<sp/>data[21]<sp/>&amp;<sp/>0x1f;</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>param-&gt;sca<sp/>=<sp/>(data[21]<sp/>&amp;<sp/>0xe0)<sp/>&gt;&gt;<sp/>5;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log_info(&quot;sca<sp/>:<sp/>%d&quot;,<sp/>(data[21]<sp/>&amp;<sp/>0xe0)<sp/>&gt;&gt;<sp/>5);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(param,<sp/>data,<sp/>22);</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//windowWidening<sp/>=<sp/>((masterSCA<sp/>+<sp/>slaveSCA)<sp/>/<sp/>1000000)<sp/>*<sp/>timeSinceLastAnchor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/>param-&gt;widening<sp/>=<sp/>(((<ref refid="link__layer_8c_1a2c573303905fa0cedf41096fb1b64eed" kindref="member">sca_ppm_tbl</ref>[param-&gt;sca]<sp/>+<sp/><ref refid="link__layer_8c_1a3b3e9d32aa6da2fab7cb9bc9f688bea0" kindref="member">bb_get_clock_accuracy</ref>())<sp/>*<sp/>param-&gt;interval<sp/>*<sp/>(param-&gt;latency<sp/>+<sp/>1)<sp/>*<sp/>1250)<sp/>/<sp/>1000000)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/>param-&gt;widening<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/data/bingquan/repo/repo_adapter/adapter_sdk/lib/btctrler/BLE_v2/link_layer.c"/>
  </compounddef>
</doxygen>
